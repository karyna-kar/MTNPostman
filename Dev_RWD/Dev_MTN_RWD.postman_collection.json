{
	"info": {
		"_postman_id": "668adb14-1a55-4642-b021-c02e93238e95",
		"name": "MTN_RWD",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Pull",
			"item": [
				{
					"name": "Verifyfinancialresourceinformation",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "Ð¡urrent_acc_Mobile_active",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "788fe719-46e7-404b-a627-cbf5259bf48c",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });\r",
													"\r",
													"var jsonData = xml2Json(responseBody);\r",
													"\r",
													"console.log(jsonData);\r",
													"\r",
													"//checking the payload structure \r",
													"\r",
													"var schema = {\r",
													"    \"type\":\"object\", \r",
													"    \"properties\":{\r",
													"        \"ns2:verifyfinancialresourceinformationresponse\":{\r",
													"            \"type\":\"object\", \r",
													"            \"properties\":{\r",
													"                \"$\":{\"type\":\"object\"},\r",
													"                \"valid\":{\"type\":\"string\"}\r",
													"            }, \r",
													"            \"required\":[\"valid\"],\r",
													"            \"additionalProperties\": false\r",
													"        }\r",
													"    }, \r",
													"    \"required\":[\"ns2:verifyfinancialresourceinformationresponse\"], \r",
													"    \"additionalProperties\": false\r",
													"    \r",
													"};\r",
													"\r",
													"pm.test(\"Schema is valid\", () => {\r",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"//checking the Status code\r",
													"pm.test(\"Valid code is true\", function () {\r",
													"    pm.expect(jsonData['ns2:verifyfinancialresourceinformationresponse'].valid).to.eql(\"true\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "03d8bb93-7d9c-4605-9d8f-77f97284bee2",
												"exec": [
													"\r",
													"pm.environment.set(\"account\", \"020001241000570459\");\r",
													"\r",
													"pm.environment.set(\"phone\", \"0755236734\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:verifyfinancialresourceinformationrequest xmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n   <resource>FRI:{{account}}@urwegobank.bank/SP</resource>\r\n   <accountholderid>ID:{{phone}}/MSISDN</accountholderid>\r\n   <extension/>\r\n</ns0:verifyfinancialresourceinformationrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/verifyfinancialresourceinformation",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"verifyfinancialresourceinformation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Saving_acc_Mobile_active",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "725ee594-df1e-4b76-9c65-e5f312ad44dd",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });\r",
													"\r",
													"var jsonData = xml2Json(responseBody);\r",
													"\r",
													"console.log(jsonData);\r",
													"\r",
													"//checking the payload structure \r",
													"\r",
													"var schema = {\r",
													"    \"type\":\"object\", \r",
													"    \"properties\":{\r",
													"        \"ns2:verifyfinancialresourceinformationresponse\":{\r",
													"            \"type\":\"object\", \r",
													"            \"properties\":{\r",
													"                \"$\":{\"type\":\"object\"},\r",
													"                \"valid\":{\"type\":\"string\"}\r",
													"            }, \r",
													"            \"required\":[\"valid\"],\r",
													"            \"additionalProperties\": false\r",
													"        }\r",
													"    }, \r",
													"    \"required\":[\"ns2:verifyfinancialresourceinformationresponse\"], \r",
													"    \"additionalProperties\": false\r",
													"    \r",
													"};\r",
													"\r",
													"pm.test(\"Schema is valid\", () => {\r",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"//checking the Status code\r",
													"pm.test(\"Status code is true\", function () {\r",
													"    pm.expect(jsonData['ns2:verifyfinancialresourceinformationresponse'].valid).to.eql(\"true\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cba9f471-0881-42c5-9c5e-5e4d09a0747c",
												"exec": [
													"pm.environment.set(\"account\", \"020001211000336836\");\r",
													"\r",
													"pm.environment.set(\"phone\", \"0744454487\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:verifyfinancialresourceinformationrequest xmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n   <resource>FRI:{{account}}@urwegobank.bank/SP</resource>\r\n   <accountholderid>ID:{{phone}}/MSISDN</accountholderid>\r\n   <extension/>\r\n</ns0:verifyfinancialresourceinformationrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/verifyfinancialresourceinformation",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"verifyfinancialresourceinformation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Blocked_acc_Mobile_active",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "075114b0-c8ed-455d-950f-3798c2f9638e",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });\r",
													"\r",
													"var jsonData = xml2Json(responseBody);\r",
													"\r",
													"console.log(jsonData);\r",
													"\r",
													"//checking the payload structure \r",
													"\r",
													"var schema = {\r",
													"    \"type\":\"object\", \r",
													"    \"properties\":{\r",
													"        \"ns2:verifyfinancialresourceinformationresponse\":{\r",
													"            \"type\":\"object\", \r",
													"            \"properties\":{\r",
													"                \"$\":{\"type\":\"object\"},\r",
													"                \"valid\":{\"type\":\"string\"}\r",
													"            }, \r",
													"            \"required\":[\"valid\"],\r",
													"            \"additionalProperties\": false\r",
													"        }\r",
													"    }, \r",
													"    \"required\":[\"ns2:verifyfinancialresourceinformationresponse\"], \r",
													"    \"additionalProperties\": false\r",
													"    \r",
													"};\r",
													"\r",
													"pm.test(\"Schema is valid\", () => {\r",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"//checking the Status code\r",
													"pm.test(\"Status code is true\", function () {\r",
													"    pm.expect(jsonData['ns2:verifyfinancialresourceinformationresponse'].valid).to.eql(\"true\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0d10de0f-b259-4636-9eeb-cbf6d8ca51ed",
												"exec": [
													"pm.environment.set(\"account\", \"020001241000725562\");\r",
													"\r",
													"pm.environment.set(\"phone\", \"0747346352\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:verifyfinancialresourceinformationrequest xmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n   <resource>FRI:{{account}}@urwegobank.bank/SP</resource>\r\n   <accountholderid>ID:{{phone}}/MSISDN</accountholderid>\r\n   <extension/>\r\n</ns0:verifyfinancialresourceinformationrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/verifyfinancialresourceinformation",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"verifyfinancialresourceinformation"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "Notactive Mobile Customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e1db831d-7ec9-4e57-9e40-0b12b5f21d2b",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });\r",
													"\r",
													"var jsonData = xml2Json(responseBody);\r",
													"\r",
													"console.log(jsonData);\r",
													"\r",
													"//checking the payload structure \r",
													"\r",
													"var schema = {\r",
													"    \"type\":\"object\", \r",
													"    \"properties\":{\r",
													"        \"ns2:verifyfinancialresourceinformationresponse\":{\r",
													"            \"type\":\"object\", \r",
													"            \"properties\":{\r",
													"                \"$\":{\"type\":\"object\"},\r",
													"                \"valid\":{\"type\":\"string\"}\r",
													"            }, \r",
													"            \"required\":[\"valid\"],\r",
													"            \"additionalProperties\": false\r",
													"        }\r",
													"    }, \r",
													"    \"required\":[\"ns2:verifyfinancialresourceinformationresponse\"], \r",
													"    \"additionalProperties\": false\r",
													"    \r",
													"};\r",
													"\r",
													"pm.test(\"Schema is valid\", () => {\r",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"//checking the Status code\r",
													"pm.test(\"Valid code is false\", function () {\r",
													"    pm.expect(jsonData['ns2:verifyfinancialresourceinformationresponse'].valid).to.eql(\"false\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b4a819fd-893a-49c6-954b-b859e8dd422d",
												"exec": [
													"\r",
													"pm.environment.set(\"account\", \"020001241000536315\");\r",
													"\r",
													"pm.environment.set(\"phone\", \"0755772714\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:verifyfinancialresourceinformationrequest xmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n   <resource>FRI:{{account}}4@urwegobank.bank/SP</resource>\r\n   <accountholderid>ID:{{phone}}/MSISDN</accountholderid>\r\n   <extension/>\r\n</ns0:verifyfinancialresourceinformationrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/verifyfinancialresourceinformation",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"verifyfinancialresourceinformation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Notactive Mobile Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f70e9af2-7e8f-4c4d-9513-211b69b40d57",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });\r",
													"\r",
													"var jsonData = xml2Json(responseBody);\r",
													"\r",
													"console.log(jsonData);\r",
													"\r",
													"//checking the payload structure \r",
													"\r",
													"var schema = {\r",
													"    \"type\":\"object\", \r",
													"    \"properties\":{\r",
													"        \"ns2:verifyfinancialresourceinformationresponse\":{\r",
													"            \"type\":\"object\", \r",
													"            \"properties\":{\r",
													"                \"$\":{\"type\":\"object\"},\r",
													"                \"valid\":{\"type\":\"string\"}\r",
													"            }, \r",
													"            \"required\":[\"valid\"],\r",
													"            \"additionalProperties\": false\r",
													"        }\r",
													"    }, \r",
													"    \"required\":[\"ns2:verifyfinancialresourceinformationresponse\"], \r",
													"    \"additionalProperties\": false\r",
													"    \r",
													"};\r",
													"\r",
													"pm.test(\"Schema is valid\", () => {\r",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"//checking the Status code\r",
													"pm.test(\"Valid code is false\", function () {\r",
													"    pm.expect(jsonData['ns2:verifyfinancialresourceinformationresponse'].valid).to.eql(\"false\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "60a502b3-0bd5-4839-bc86-cd9f2f93827a",
												"exec": [
													"pm.environment.set(\"account\", \"020001241000686471\");\r",
													"\r",
													"\r",
													"pm.environment.set(\"phone\", \"0774533455\");\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:verifyfinancialresourceinformationrequest xmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n   <resource>FRI:{{account}}4@urwegobank.bank/SP</resource>\r\n   <accountholderid>ID:{{phone}}/MSISDN</accountholderid>\r\n   <extension/>\r\n</ns0:verifyfinancialresourceinformationrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/verifyfinancialresourceinformation",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"verifyfinancialresourceinformation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Not Matching Phone",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "231ae2b5-6b7f-4672-8580-6dd11d1d7457",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });\r",
													"\r",
													"var jsonData = xml2Json(responseBody);\r",
													"\r",
													"console.log(jsonData);\r",
													"\r",
													"//checking the payload structure \r",
													"\r",
													"var schema = {\r",
													"    \"type\":\"object\", \r",
													"    \"properties\":{\r",
													"        \"ns2:verifyfinancialresourceinformationresponse\":{\r",
													"            \"type\":\"object\", \r",
													"            \"properties\":{\r",
													"                \"$\":{\"type\":\"object\"},\r",
													"                \"valid\":{\"type\":\"string\"}\r",
													"            }, \r",
													"            \"required\":[\"valid\"],\r",
													"            \"additionalProperties\": false\r",
													"        }\r",
													"    }, \r",
													"    \"required\":[\"ns2:verifyfinancialresourceinformationresponse\"], \r",
													"    \"additionalProperties\": false\r",
													"    \r",
													"};\r",
													"\r",
													"pm.test(\"Schema is valid\", () => {\r",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"//checking the Status code\r",
													"pm.test(\"Valid code is false\", function () {\r",
													"    pm.expect(jsonData['ns2:verifyfinancialresourceinformationresponse'].valid).to.eql(\"false\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8cdf90c8-d840-42fa-9df4-83faf8b020d9",
												"exec": [
													"pm.environment.set(\"account\", \"020001241000005434\");\r",
													"\r",
													"pm.environment.set(\"phone\", \"0776148625\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:verifyfinancialresourceinformationrequest xmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n   <resource>FRI:{{account}}@urwegobank.bank/SP</resource>\r\n   <accountholderid>ID:{{phone}}/MSISDN</accountholderid>\r\n   <extension/>\r\n</ns0:verifyfinancialresourceinformationrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/verifyfinancialresourceinformation",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"verifyfinancialresourceinformation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Not Existing Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "37cc31f5-9d97-4c57-8d1e-b483024df971",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });\r",
													"\r",
													"var jsonData = xml2Json(responseBody);\r",
													"\r",
													"console.log(jsonData);\r",
													"\r",
													"//checking the payload structure \r",
													"\r",
													"var schema = {\r",
													"    \"type\":\"object\", \r",
													"    \"properties\":{\r",
													"        \"ns2:verifyfinancialresourceinformationresponse\":{\r",
													"            \"type\":\"object\", \r",
													"            \"properties\":{\r",
													"                \"$\":{\"type\":\"object\"},\r",
													"                \"valid\":{\"type\":\"string\"}\r",
													"            }, \r",
													"            \"required\":[\"valid\"],\r",
													"            \"additionalProperties\": false\r",
													"        }\r",
													"    }, \r",
													"    \"required\":[\"ns2:verifyfinancialresourceinformationresponse\"], \r",
													"    \"additionalProperties\": false\r",
													"    \r",
													"};\r",
													"\r",
													"pm.test(\"Schema is valid\", () => {\r",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"//checking the Status code\r",
													"pm.test(\"Status code is false\", function () {\r",
													"    pm.expect(jsonData['ns2:verifyfinancialresourceinformationresponse'].valid).to.eql(\"false\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "62493d0d-1061-4744-96fe-7b2b272b82b5",
												"exec": [
													"pm.environment.set(\"account\", \"020001241000005435\");\r",
													"\r",
													"pm.environment.set(\"phone\", \"0774357434\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:verifyfinancialresourceinformationrequest xmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n   <resource>FRI:{{account}}@urwegobank.bank/SP</resource>\r\n   <accountholderid>ID:{{phone}}/MSISDN</accountholderid>\r\n   <extension/>\r\n</ns0:verifyfinancialresourceinformationrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/verifyfinancialresourceinformation",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"verifyfinancialresourceinformation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Auth issue",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f362c15c-b0b5-4e95-81c1-06eb306e94a5",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });\r",
													"\r",
													"var jsonData = xml2Json(responseBody);\r",
													"\r",
													"console.log(jsonData);\r",
													"\r",
													"//checking the payload structure \r",
													"\r",
													"var schema = {\r",
													"    \"type\":\"object\", \r",
													"    \"properties\":{\r",
													"        \"ns2:verifyfinancialresourceinformationresponse\":{\r",
													"            \"type\":\"object\", \r",
													"            \"properties\":{\r",
													"                \"$\":{\"type\":\"object\"},\r",
													"                \"valid\":{\"type\":\"string\"}\r",
													"            }, \r",
													"            \"required\":[\"valid\"],\r",
													"            \"additionalProperties\": false\r",
													"        }\r",
													"    }, \r",
													"    \"required\":[\"ns2:verifyfinancialresourceinformationresponse\"], \r",
													"    \"additionalProperties\": false\r",
													"    \r",
													"};\r",
													"\r",
													"pm.test(\"Schema is valid\", () => {\r",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"//checking the Status code\r",
													"pm.test(\"Status code is true\", function () {\r",
													"    pm.expect(jsonData['ns2:verifyfinancialresourceinformationresponse'].valid).to.eql(\"false\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "41e6d232-1783-413a-b5ad-89bdee866f10",
												"exec": [
													"pm.environment.set(\"account\", \"020001241000358902\");\r",
													"\r",
													"pm.environment.set(\"phone\", \"0745455638\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{Auth_login}}1",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:verifyfinancialresourceinformationrequest xmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n   <resource>FRI:{{account}}@urwegobank.bank/SP</resource>\r\n   <accountholderid>ID:{{phone}}/MSISDN</accountholderid>\r\n   <extension/>\r\n</ns0:verifyfinancialresourceinformationrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/verifyfinancialresourceinformation",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"verifyfinancialresourceinformation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid FRI",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86f24992-2f4d-4a29-93a3-67823518a701",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });\r",
													"\r",
													"var jsonData = xml2Json(responseBody);\r",
													"\r",
													"console.log(jsonData);\r",
													"\r",
													"//checking the payload structure \r",
													"\r",
													"var schema = {\r",
													"    \"type\":\"object\", \r",
													"    \"properties\":{\r",
													"        \"ns2:verifyfinancialresourceinformationresponse\":{\r",
													"            \"type\":\"object\", \r",
													"            \"properties\":{\r",
													"                \"$\":{\"type\":\"object\"},\r",
													"                \"valid\":{\"type\":\"string\"}\r",
													"            }, \r",
													"            \"required\":[\"valid\"],\r",
													"            \"additionalProperties\": false\r",
													"        }\r",
													"    }, \r",
													"    \"required\":[\"ns2:verifyfinancialresourceinformationresponse\"], \r",
													"    \"additionalProperties\": false\r",
													"    \r",
													"};\r",
													"\r",
													"pm.test(\"Schema is valid\", () => {\r",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"//checking the Status code\r",
													"pm.test(\"Status code is false\", function () {\r",
													"    pm.expect(jsonData['ns2:verifyfinancialresourceinformationresponse'].valid).to.eql(\"false\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "07c4efd1-b23c-4f51-8041-74db0a99d7c5",
												"exec": [
													"pm.environment.set(\"account\", \"020001241000005434\");\r",
													"\r",
													"pm.environment.set(\"phone\", \"0774357434\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:verifyfinancialresourceinformationrequest xmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n   <resource>FRI1:{{account}}@urwegobank.bank/SP</resource>\r\n   <accountholderid>ID:{{phone}}/MSISDN</accountholderid>\r\n   <extension/>\r\n</ns0:verifyfinancialresourceinformationrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/verifyfinancialresourceinformation",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"verifyfinancialresourceinformation"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ab6b8525-840a-43ea-9356-d28e858deefc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "181a2211-77ee-4259-84f9-55844bcd35a9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Withdrawal",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "Current_acc_Mobile_active",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c919100b-4bb3-4415-b79d-00e8da1fa4fb",
												"exec": [
													"//checking the Responde code\r",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });\r",
													"\r",
													"var jsonData = xml2Json(responseBody);\r",
													"\r",
													"console.log(jsonData);\r",
													"\r",
													"\r",
													"//checking the payload structure \r",
													"\r",
													"var schema = {\r",
													"    \"type\":\"object\", \r",
													"    \"properties\":{\r",
													"        \"ns2:withdrawresponse\":{\r",
													"            \"type\":\"object\", \r",
													"            \"properties\":{\r",
													"                \"$\":{\"type\":\"object\"},\r",
													"                \"transactionid\":{\"type\":\"string\"},\r",
													"                \"providertransactionid\":{\"type\":\"string\"},\r",
													"                \"status\":{\"type\":\"string\"},\r",
													"                \"message\":{\"type\":\"string\"},\r",
													"                \"extension\":{\"type\":\"string\"}\r",
													"            }, \r",
													"            \"required\":[\"transactionid\", \"providertransactionid\", \"status\", \"message\", \"extension\"],\r",
													"            \"additionalProperties\": false\r",
													"        }\r",
													"    }, \r",
													"    \"required\":[\"ns2:withdrawresponse\"], \r",
													"    \"additionalProperties\": false   \r",
													"};\r",
													"\r",
													"pm.test(\"Schemai is valid\", () => {\r",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"//checking the Status \r",
													"pm.test(\"Status is COMPLETED\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].status).to.eql(\"COMPLETED\");\r",
													"});\r",
													"\r",
													"\r",
													"//checking Account Number \r",
													"pm.test(\"Matching Account Number\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].message).to.include(pm.environment.get(\"account\"));  \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "00eb4a04-9dc4-4b4e-ac48-8a5a517b3360",
												"exec": [
													"//Increasing Transaction ID for 1\r",
													"var value = pm.environment.get(\"transactionID\");\r",
													"pm.environment.set(\"transactionID\", (parseInt(value)+1).toString());\r",
													"\r",
													"pm.environment.set(\"account\", \"020001241000570459\");\r",
													"\r",
													"pm.environment.set(\"phone\", \"0755236734\");\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:withdrawrequest xmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n    <resource>FRI:{{account}}@FISA.bank/SP</resource>\r\n    <accountholderid>ID:{{phone}}/MSISDN</accountholderid>\r\n    <amount>\r\n        <amount>15.02</amount>\r\n        <currency>RWF</currency>\r\n    </amount>\r\n    <transactionid>{{transactionID}}</transactionid>\r\n</ns0:withdrawrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/withdraw",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"withdraw"
											]
										}
									},
									"response": []
								},
								{
									"name": "Saving_acc_Mobile_active",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3834f0ed-de27-44a6-ba66-ec95f31e1024",
												"exec": [
													"//checking the Responde code\r",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });\r",
													"\r",
													"var jsonData = xml2Json(responseBody);\r",
													"\r",
													"console.log(jsonData);\r",
													"\r",
													"\r",
													"//checking the payload structure \r",
													"\r",
													"var schema = {\r",
													"    \"type\":\"object\", \r",
													"    \"properties\":{\r",
													"        \"ns2:withdrawresponse\":{\r",
													"            \"type\":\"object\", \r",
													"            \"properties\":{\r",
													"                \"$\":{\"type\":\"object\"},\r",
													"                \"transactionid\":{\"type\":\"string\"},\r",
													"                \"providertransactionid\":{\"type\":\"string\"},\r",
													"                \"status\":{\"type\":\"string\"},\r",
													"                \"message\":{\"type\":\"string\"},\r",
													"                \"extension\":{\"type\":\"string\"}\r",
													"            }, \r",
													"            \"required\":[\"transactionid\", \"providertransactionid\", \"status\", \"message\", \"extension\"],\r",
													"            \"additionalProperties\": false\r",
													"        }\r",
													"    }, \r",
													"    \"required\":[\"ns2:withdrawresponse\"], \r",
													"    \"additionalProperties\": false   \r",
													"};\r",
													"\r",
													"pm.test(\"Schemai is valid\", () => {\r",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"//checking the Status \r",
													"pm.test(\"Status is COMPLETED\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].status).to.eql(\"COMPLETED\");\r",
													"});\r",
													"\r",
													"\r",
													"//checking Account Number \r",
													"pm.test(\"Matching Account Number\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].message).to.include(pm.environment.get(\"account\"));  \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4e7df4e8-9d77-4926-b820-3d68cc3ff059",
												"exec": [
													"//Increasing Transaction ID for 1\r",
													"var value = pm.environment.get(\"transactionID\");\r",
													"pm.environment.set(\"transactionID\", (parseInt(value)+1).toString());\r",
													"\r",
													"pm.environment.set(\"account\", \"020001211000336836\");\r",
													"\r",
													"pm.environment.set(\"phone\", \"0744454487\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:withdrawrequest xmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n    <resource>FRI:{{account}}@FISA.bank/SP</resource>\r\n    <accountholderid>ID:{{phone}}/MSISDN</accountholderid>\r\n    <amount>\r\n        <amount>10.02</amount>\r\n        <currency>RWF</currency>\r\n    </amount>\r\n    <transactionid>{{transactionID}}</transactionid>\r\n</ns0:withdrawrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/withdraw",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"withdraw"
											]
										}
									},
									"response": []
								},
								{
									"name": "Current_acc_Mobile_active Other Bank",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "150bbbdc-aad0-4acf-ae3e-e16cddc1bf63",
												"exec": [
													"//checking the Responde code\r",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });\r",
													"\r",
													"var jsonData = xml2Json(responseBody);\r",
													"\r",
													"console.log(jsonData);\r",
													"\r",
													"\r",
													"//checking the payload structure \r",
													"\r",
													"var schema = {\r",
													"    \"type\":\"object\", \r",
													"    \"properties\":{\r",
													"        \"ns2:withdrawresponse\":{\r",
													"            \"type\":\"object\", \r",
													"            \"properties\":{\r",
													"                \"$\":{\"type\":\"object\"},\r",
													"                \"transactionid\":{\"type\":\"string\"},\r",
													"                \"providertransactionid\":{\"type\":\"string\"},\r",
													"                \"status\":{\"type\":\"string\"},\r",
													"                \"message\":{\"type\":\"string\"},\r",
													"                \"extension\":{\"type\":\"string\"}\r",
													"            }, \r",
													"            \"required\":[\"transactionid\", \"providertransactionid\", \"status\", \"message\", \"extension\"],\r",
													"            \"additionalProperties\": false\r",
													"        }\r",
													"    }, \r",
													"    \"required\":[\"ns2:withdrawresponse\"], \r",
													"    \"additionalProperties\": false   \r",
													"};\r",
													"\r",
													"pm.test(\"Schemai is valid\", () => {\r",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"//checking the Status \r",
													"pm.test(\"Status is COMPLETED\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].status).to.eql(\"COMPLETED\");\r",
													"});\r",
													"\r",
													"\r",
													"//checking Account Number \r",
													"pm.test(\"Matching Account Number\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].message).to.include(pm.environment.get(\"account\"));  \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0d6e23dc-ad55-4b67-811b-3789dd3f1e30",
												"exec": [
													"//Increasing Transaction ID for 1\r",
													"var value = pm.environment.get(\"transactionID\");\r",
													"pm.environment.set(\"transactionID\", (parseInt(value)+1).toString());\r",
													"\r",
													"\r",
													"//\r",
													"pm.environment.set(\"account\", \"020001211000336836\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:withdrawrequest xmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n    <resource>FRI:{{account}}@pushpull.bank/SP</resource>\r\n    <accountholderid>ID:0744454487/MSISDN</accountholderid>\r\n    <amount>\r\n        <amount>1.02</amount>\r\n        <currency>RWF</currency>\r\n    </amount>\r\n    <transactionid>{{transactionID}}</transactionid>\r\n</ns0:withdrawrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/withdraw",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"withdraw"
											]
										}
									},
									"response": []
								},
								{
									"name": "Current_acc_Mobile_active USD",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "85d58028-028c-460a-bb3b-bd66da7b7c69",
												"exec": [
													"//checking the Responde code\r",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });\r",
													"\r",
													"var jsonData = xml2Json(responseBody);\r",
													"\r",
													"console.log(jsonData);\r",
													"\r",
													"\r",
													"//checking the payload structure \r",
													"\r",
													"var schema = {\r",
													"    \"type\":\"object\", \r",
													"    \"properties\":{\r",
													"        \"ns2:withdrawresponse\":{\r",
													"            \"type\":\"object\", \r",
													"            \"properties\":{\r",
													"                \"$\":{\"type\":\"object\"},\r",
													"                \"transactionid\":{\"type\":\"string\"},\r",
													"                \"providertransactionid\":{\"type\":\"string\"},\r",
													"                \"status\":{\"type\":\"string\"},\r",
													"                \"message\":{\"type\":\"string\"},\r",
													"                \"extension\":{\"type\":\"string\"}\r",
													"            }, \r",
													"            \"required\":[\"transactionid\", \"providertransactionid\", \"status\", \"message\", \"extension\"],\r",
													"            \"additionalProperties\": false\r",
													"        }\r",
													"    }, \r",
													"    \"required\":[\"ns2:withdrawresponse\"], \r",
													"    \"additionalProperties\": false   \r",
													"};\r",
													"\r",
													"\r",
													"pm.test(\"Schemai is valid\", () => {\r",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"//checking the Status \r",
													"pm.test(\"Status is COMPLETED\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].status).to.eql(\"COMPLETED\");\r",
													"});\r",
													"\r",
													"\r",
													"//checking Account Number \r",
													"pm.test(\"Matching Account Number\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].message).to.include(pm.environment.get(\"account\"));  \r",
													"});\r",
													"\r",
													"//retrieve ProviderTransactionID\r",
													"pm.environment.set(\"ProdTransID\", jsonData['ns2:withdrawresponse'].providertransactionid);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4af1e37f-c15e-4b1b-bb4e-3f31174ca7d9",
												"exec": [
													"//Increasing Transaction ID for 1\r",
													"var value = pm.environment.get(\"transactionID\");\r",
													"pm.environment.set(\"transactionID\", (parseInt(value)+1).toString());\r",
													"\r",
													"pm.environment.set(\"account\", \"020001242000010250\");\r",
													"\r",
													"pm.environment.set(\"phone\", \"0745832116\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:withdrawrequest xmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n    <resource>FRI:{{account}}@FISA.bank/SP</resource>\r\n    <accountholderid>ID:{{phone}}/MSISDN</accountholderid>\r\n    <amount>\r\n        <amount>1.01</amount>\r\n        <currency>USD</currency>\r\n    </amount>\r\n    <transactionid>{{transactionID}}</transactionid>\r\n</ns0:withdrawrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/withdraw",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"withdraw"
											]
										}
									},
									"response": []
								},
								{
									"name": "The same transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60a3f82c-a2d0-4156-a70d-5e1d24a336e1",
												"exec": [
													"//checking the Responde code\r",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });\r",
													"\r",
													"var jsonData = xml2Json(responseBody);\r",
													"\r",
													"console.log(jsonData);\r",
													"\r",
													"\r",
													"//checking the payload structure \r",
													"\r",
													"var schema = {\r",
													"    \"type\":\"object\", \r",
													"    \"properties\":{\r",
													"        \"ns2:withdrawresponse\":{\r",
													"            \"type\":\"object\", \r",
													"            \"properties\":{\r",
													"                \"$\":{\"type\":\"object\"},\r",
													"                \"transactionid\":{\"type\":\"string\"},\r",
													"                \"providertransactionid\":{\"type\":\"string\"},\r",
													"                \"status\":{\"type\":\"string\"},\r",
													"                \"message\":{\"type\":\"string\"},\r",
													"                \"extension\":{\"type\":\"string\"}\r",
													"            }, \r",
													"            \"required\":[\"transactionid\", \"providertransactionid\", \"status\", \"message\", \"extension\"],\r",
													"            \"additionalProperties\": false\r",
													"        }\r",
													"    }, \r",
													"    \"required\":[\"ns2:withdrawresponse\"], \r",
													"    \"additionalProperties\": false   \r",
													"};\r",
													"\r",
													"pm.test(\"Schemai is valid\", () => {\r",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"//checking the Status \r",
													"pm.test(\"Status is COMPLETED\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].status).to.eql(\"COMPLETED\");\r",
													"});\r",
													"\r",
													"\r",
													"//checking Account Number \r",
													"pm.test(\"Matching Account Number\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].message).to.include(pm.environment.get(\"account\"));  \r",
													"});\r",
													"\r",
													"//checking Provider Transaction ID \r",
													"pm.test(\"Matching Provider Transaction ID\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].providertransactionid).to.include(pm.environment.get(\"ProdTransID\"));  \r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "69ac0178-601f-4ecb-a7ad-d5129f82fa22",
												"exec": [
													"pm.environment.set(\"account\", \"020001242000010250\");\r",
													"\r",
													"pm.environment.set(\"phone\", \"0745832116\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:withdrawrequest xmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n    <resource>FRI:{{account}}@FISA.bank/SP</resource>\r\n    <accountholderid>ID:{{phone}}/MSISDN</accountholderid>\r\n    <amount>\r\n        <amount>10.01</amount>\r\n        <currency>USD</currency>\r\n    </amount>\r\n    <transactionid>{{transactionID}}</transactionid>\r\n</ns0:withdrawrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/withdraw",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"withdraw"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "Dublicatied Transaction ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8648cae5-73bf-45c8-b110-77bb790dd464",
												"exec": [
													"//checking the Responde code\r",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });\r",
													"\r",
													"var jsonData = xml2Json(responseBody);\r",
													"\r",
													"console.log(jsonData);\r",
													"\r",
													"\r",
													"//checking the payload structure \r",
													"\r",
													"var schema = {\r",
													"    \"type\":\"object\", \r",
													"    \"properties\":{\r",
													"        \"ns2:withdrawresponse\":{\r",
													"            \"type\":\"object\", \r",
													"            \"properties\":{\r",
													"                \"$\":{\"type\":\"object\"},\r",
													"                \"transactionid\":{\"type\":\"string\"},\r",
													"                \"providertransactionid\":{\"type\":\"string\"},\r",
													"                \"status\":{\"type\":\"string\"}, \r",
													"                \"message\":{\"type\":\"string\"}, \r",
													"                     }, \r",
													"            \"required\":[\"providertransactionid\", \"transactionid\", \"message\", \"status\"],\r",
													"            \"additionalProperties\": false\r",
													"        }\r",
													"    }, \r",
													"    \"required\":[\"ns2:withdrawresponse\"], \r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"\r",
													"pm.test(\"Schemai is valid\", () => {\r",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"//checking the Status \r",
													"pm.test(\"Status is FAILED\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].status).to.eql(\"FAILED\");\r",
													"});\r",
													"\r",
													"\r",
													"//checking the Error message\r",
													"pm.test(\"Error message is The sender mobile number is invalid.\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].message).to.eql(\"The details of the message are not matching the original message.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6c737d28-d465-478c-aa4c-4af3fffd38e0",
												"exec": [
													"pm.environment.set(\"account\", \"020001211000336836\");\r",
													"\r",
													"pm.environment.set(\"phone\", \"0744454487\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:withdrawrequest xmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n    <resource>FRI:{{account}}@pushpull.bank/SP</resource>\r\n    <accountholderid>ID:{{phone}}/MSISDN</accountholderid>\r\n    <amount>\r\n        <amount>1.02</amount>\r\n        <currency>RWF</currency>\r\n    </amount>\r\n    <transactionid>{{transactionID}}</transactionid>\r\n</ns0:withdrawrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/withdraw",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"withdraw"
											]
										}
									},
									"response": []
								},
								{
									"name": "Not Matching Phone",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2e58334-4e5d-44fd-806a-32a748ecf803",
												"exec": [
													"//checking the Responde code\r",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });\r",
													"\r",
													"var jsonData = xml2Json(responseBody);\r",
													"\r",
													"console.log(jsonData);\r",
													"\r",
													"//checking the payload structure ????\r",
													"var schema = {\r",
													"    \"type\":\"object\", \r",
													"    \"properties\":{\r",
													"        \"ns2:withdrawresponse\":{\r",
													"            \"type\":\"object\", \r",
													"            \"properties\":{\r",
													"                \"$\":{\"type\":\"object\"},\r",
													"                \"transactionid\":{\"type\":\"string\"},\r",
													"                \"providertransactionid\":{\"type\":\"string\"},\r",
													"                \"status\":{\"type\":\"string\"}, \r",
													"                \"message\":{\"type\":\"string\"}, \r",
													"                     }, \r",
													"            \"required\":[\"providertransactionid\", \"transactionid\", \"message\", \"status\"],\r",
													"            \"additionalProperties\": false\r",
													"        }\r",
													"    }, \r",
													"    \"required\":[\"ns2:withdrawresponse\"], \r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Schemai is valid\", () => {\r",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"//checking the Status \r",
													"pm.test(\"Status is FAILED\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].status).to.eql(\"FAILED\");\r",
													"});\r",
													"\r",
													"\r",
													"//checking the Error message\r",
													"pm.test(\"Error message is The sender mobile number is invalid.\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].message).to.eql(\"The sender mobile number is invalid.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "02ad5733-b3f3-4b98-abcc-2e551049ae76",
												"exec": [
													"//Increasing Transaction ID for 1\r",
													"var value = pm.environment.get(\"transactionID\");\r",
													"pm.environment.set(\"transactionID\", (parseInt(value)+1).toString());\r",
													"\r",
													"pm.environment.set(\"account\", \"020001241000570459\");\r",
													"\r",
													"pm.environment.set(\"phone\", \"0742376525\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:withdrawrequest xmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n    <resource>FRI:{{account}}@FISA.bank/SP</resource>\r\n    <accountholderid>ID:{{phone}}/MSISDN</accountholderid>\r\n    <amount>\r\n        <amount>16.02</amount>\r\n        <currency>RWF</currency>\r\n    </amount>\r\n    <transactionid>{{transactionID}}</transactionid>\r\n</ns0:withdrawrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/withdraw",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"withdraw"
											]
										}
									},
									"response": []
								},
								{
									"name": "NotActiveMobileCustomer_both",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "febbe065-9e3d-4c51-b4c0-1afa289dcc45",
												"exec": [
													"//checking the Responde code\r",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });\r",
													"\r",
													"var jsonData = xml2Json(responseBody);\r",
													"\r",
													"console.log(jsonData);\r",
													"\r",
													"//checking the payload structure ????\r",
													"var schema = {\r",
													"    \"type\":\"object\", \r",
													"    \"properties\":{\r",
													"        \"ns2:withdrawresponse\":{\r",
													"            \"type\":\"object\", \r",
													"            \"properties\":{\r",
													"                \"$\":{\"type\":\"object\"},\r",
													"                \"transactionid\":{\"type\":\"string\"},\r",
													"                \"providertransactionid\":{\"type\":\"string\"},\r",
													"                \"status\":{\"type\":\"string\"}, \r",
													"                \"message\":{\"type\":\"string\"}, \r",
													"                     }, \r",
													"            \"required\":[\"providertransactionid\", \"transactionid\", \"message\", \"status\"],\r",
													"            \"additionalProperties\": false\r",
													"        }\r",
													"    }, \r",
													"    \"required\":[\"ns2:withdrawresponse\"], \r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Schemai is valid\", () => {\r",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"//checking the Status \r",
													"pm.test(\"Status is FAILED\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].status).to.eql(\"FAILED\");\r",
													"});\r",
													"\r",
													"\r",
													"//checking the Error message\r",
													"pm.test(\"Error message is The customer is not activated for MB.\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].message).to.eql(\"The customer is not activated for mobile banking.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d46f20d0-f2cb-466d-82bf-9f007e71659a",
												"exec": [
													"//Increasing Transaction ID for 1\r",
													"var value = pm.environment.get(\"transactionID\");\r",
													"pm.environment.set(\"transactionID\", (parseInt(value)+1).toString());\r",
													"\r",
													"\r",
													"pm.environment.set(\"account\", \"020001241000536315\");\r",
													"\r",
													"pm.environment.set(\"phone\", \"0755772714\");\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:withdrawrequest xmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n    <resource>FRI:{{account}}@FISA.bank/SP</resource>\r\n    <accountholderid>ID:{{phone}}/MSISDN</accountholderid>\r\n    <amount>\r\n        <amount>16.02</amount>\r\n        <currency>RWF</currency>\r\n    </amount>\r\n    <transactionid>{{transactionID}}</transactionid>\r\n</ns0:withdrawrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/withdraw",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"withdraw"
											]
										}
									},
									"response": []
								},
								{
									"name": "NotActiveMobileAccount_both",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2393431a-667c-42cc-9c87-0d407b1e6482",
												"exec": [
													"//checking the Responde code\r",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });\r",
													"\r",
													"var jsonData = xml2Json(responseBody);\r",
													"\r",
													"console.log(jsonData);\r",
													"\r",
													"//checking the payload structure ????\r",
													"var schema = {\r",
													"    \"type\":\"object\", \r",
													"    \"properties\":{\r",
													"        \"ns2:withdrawresponse\":{\r",
													"            \"type\":\"object\", \r",
													"            \"properties\":{\r",
													"                \"$\":{\"type\":\"object\"},\r",
													"                \"transactionid\":{\"type\":\"string\"},\r",
													"                \"providertransactionid\":{\"type\":\"string\"},\r",
													"                \"status\":{\"type\":\"string\"}, \r",
													"                \"message\":{\"type\":\"string\"}, \r",
													"                     }, \r",
													"            \"required\":[\"providertransactionid\", \"transactionid\", \"message\", \"status\"],\r",
													"            \"additionalProperties\": false\r",
													"        }\r",
													"    }, \r",
													"    \"required\":[\"ns2:withdrawresponse\"], \r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Schemai is valid\", () => {\r",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"//checking the Status \r",
													"pm.test(\"Status is FAILED\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].status).to.eql(\"FAILED\");\r",
													"});\r",
													"\r",
													"\r",
													"//checking the Error message\r",
													"pm.test(\"Error message is The sender mobile number is invalid.\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].message).to.eql(\"The account is not activated for mobile banking.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c496bfb3-a400-4d83-93e9-8ab544fa8bb4",
												"exec": [
													"//Increasing Transaction ID for 1\r",
													"var value = pm.environment.get(\"transactionID\");\r",
													"pm.environment.set(\"transactionID\", (parseInt(value)+1).toString());\r",
													"\r",
													"\r",
													"//\r",
													"pm.environment.set(\"account\", \"020001241000686471\");\r",
													"\r",
													"\r",
													"pm.environment.set(\"phone\", \"0774533455\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:withdrawrequest xmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n    <resource>FRI:{{account}}@FISA.bank/SP</resource>\r\n    <accountholderid>ID:{{phone}}/MSISDN</accountholderid>\r\n    <amount>\r\n        <amount>16.02</amount>\r\n        <currency>RWF</currency>\r\n    </amount>\r\n    <transactionid>{{transactionID}}</transactionid>\r\n</ns0:withdrawrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/withdraw",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"withdraw"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Currency",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1ca61a9-1dc5-4782-b784-87746bf383ae",
												"exec": [
													"//checking the Responde code\r",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });\r",
													"\r",
													"var jsonData = xml2Json(responseBody);\r",
													"\r",
													"console.log(jsonData);\r",
													"\r",
													"//checking the payload structure ????\r",
													"var schema = {\r",
													"    \"type\":\"object\", \r",
													"    \"properties\":{\r",
													"        \"ns2:withdrawresponse\":{\r",
													"            \"type\":\"object\", \r",
													"            \"properties\":{\r",
													"                \"$\":{\"type\":\"object\"},\r",
													"                \"transactionid\":{\"type\":\"string\"},\r",
													"                \"providertransactionid\":{\"type\":\"string\"},\r",
													"                \"status\":{\"type\":\"string\"}, \r",
													"                \"message\":{\"type\":\"string\"}, \r",
													"                     }, \r",
													"            \"required\":[\"providertransactionid\", \"transactionid\", \"message\", \"status\"],\r",
													"            \"additionalProperties\": false\r",
													"        }\r",
													"    }, \r",
													"    \"required\":[\"ns2:withdrawresponse\"], \r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Schemai is valid\", () => {\r",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"//checking the Status \r",
													"pm.test(\"Status is FAILED\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].status).to.eql(\"FAILED\");\r",
													"});\r",
													"\r",
													"\r",
													"//checking the Error message\r",
													"pm.test(\"Error message is Wrong Currency.\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].message).to.eql(\"Currency of the account does not match to currency of transaction.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "65add1c4-fb55-4851-9cfe-d4aa80eadbc4",
												"exec": [
													"//Increasing Transaction ID for 1\r",
													"var value = pm.environment.get(\"transactionID\");\r",
													"pm.environment.set(\"transactionID\", (parseInt(value)+1).toString());\r",
													"\r",
													"pm.environment.set(\"account\", \"020001241000005240\");\r",
													"\r",
													"pm.environment.set(\"phone\", \"0741725336\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:withdrawrequest xmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n    <resource>FRI:{{account}}@FISA.bank/SP</resource>\r\n    <accountholderid>ID:{{phone}}/MSISDN</accountholderid>\r\n    <amount>\r\n        <amount>1.02</amount>\r\n        <currency>USD</currency>\r\n    </amount>\r\n    <transactionid>{{transactionID}}</transactionid>\r\n</ns0:withdrawrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/withdraw",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"withdraw"
											]
										}
									},
									"response": []
								},
								{
									"name": "Not enough balance without min",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b8428f85-9f1b-48ae-b7c9-8f0b61cc1ec4",
												"exec": [
													"//checking the Responde code\r",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });\r",
													"\r",
													"var jsonData = xml2Json(responseBody);\r",
													"\r",
													"console.log(jsonData);\r",
													"\r",
													"//checking the payload structure ????\r",
													"var schema = {\r",
													"    \"type\":\"object\", \r",
													"    \"properties\":{\r",
													"        \"ns2:withdrawresponse\":{\r",
													"            \"type\":\"object\", \r",
													"            \"properties\":{\r",
													"                \"$\":{\"type\":\"object\"},\r",
													"                \"transactionid\":{\"type\":\"string\"},\r",
													"                \"providertransactionid\":{\"type\":\"string\"},\r",
													"                \"status\":{\"type\":\"string\"}, \r",
													"                \"message\":{\"type\":\"string\"}, \r",
													"                     }, \r",
													"            \"required\":[\"providertransactionid\", \"transactionid\", \"message\", \"status\"],\r",
													"            \"additionalProperties\": false\r",
													"        }\r",
													"    }, \r",
													"    \"required\":[\"ns2:withdrawresponse\"], \r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Schemai is valid\", () => {\r",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"//checking the Status \r",
													"pm.test(\"Status is FAILED\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].status).to.eql(\"FAILED\");\r",
													"});\r",
													"\r",
													"\r",
													"//checking the Error message\r",
													"pm.test(\"Error message is Insufficient balance.\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].message).to.eql(\"The accountâs balance is insufficient to process the transaction.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "467cb8c0-7d88-4bc6-bf74-9390ee758f1b",
												"exec": [
													"//Increasing Transaction ID for 1\r",
													"var value = pm.environment.get(\"transactionID\");\r",
													"pm.environment.set(\"transactionID\", (parseInt(value)+1).toString());\r",
													"\r",
													"pm.environment.set(\"account\", \"020001241000005240\");\r",
													"\r",
													"pm.environment.set(\"phone\", \"0741725336\");\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:withdrawrequest xmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n    <resource>FRI:{{account}}@FISA.bank/SP</resource>\r\n    <accountholderid>ID:{{phone}}/MSISDN</accountholderid>\r\n    <amount>\r\n        <amount>2000</amount>\r\n        <currency>RWF</currency>\r\n    </amount>\r\n    <transactionid>{{transactionID}}</transactionid>\r\n</ns0:withdrawrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/withdraw",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"withdraw"
											]
										}
									},
									"response": []
								},
								{
									"name": "Not enough balance with min",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dbf9f6bc-c5df-40cf-88ab-0b5b529ad065",
												"exec": [
													"//checking the Responde code\r",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });\r",
													"\r",
													"var jsonData = xml2Json(responseBody);\r",
													"\r",
													"console.log(jsonData);\r",
													"\r",
													"//checking the payload structure ????\r",
													"var schema = {\r",
													"    \"type\":\"object\", \r",
													"    \"properties\":{\r",
													"        \"ns2:withdrawresponse\":{\r",
													"            \"type\":\"object\", \r",
													"            \"properties\":{\r",
													"                \"$\":{\"type\":\"object\"},\r",
													"                \"transactionid\":{\"type\":\"string\"},\r",
													"                \"providertransactionid\":{\"type\":\"string\"},\r",
													"                \"status\":{\"type\":\"string\"}, \r",
													"                \"message\":{\"type\":\"string\"}, \r",
													"                     }, \r",
													"            \"required\":[\"providertransactionid\", \"transactionid\", \"message\", \"status\"],\r",
													"            \"additionalProperties\": false\r",
													"        }\r",
													"    }, \r",
													"    \"required\":[\"ns2:withdrawresponse\"], \r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Schemai is valid\", () => {\r",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"//checking the Status \r",
													"pm.test(\"Status is FAILED\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].status).to.eql(\"FAILED\");\r",
													"});\r",
													"\r",
													"\r",
													"//checking the Error message\r",
													"pm.test(\"Error message is Insufficient balance.\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].message).to.eql(\"The accountâs balance is insufficient to process the transaction.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2af86f1a-41cf-47b6-85c8-542db4507009",
												"exec": [
													"//Increasing Transaction ID for 1\r",
													"var value = pm.environment.get(\"transactionID\");\r",
													"pm.environment.set(\"transactionID\", (parseInt(value)+1).toString());\r",
													"\r",
													"pm.environment.set(\"account\", \"020001241000162283\");\r",
													"\r",
													"pm.environment.set(\"phone\", \"0745662646\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:withdrawrequest xmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n    <resource>FRI:{{account}}@FISA.bank/SP</resource>\r\n    <accountholderid>ID:{{phone}}/MSISDN</accountholderid>\r\n    <amount>\r\n        <amount>4000</amount>\r\n        <currency>RWF</currency>\r\n    </amount>\r\n    <transactionid>{{transactionID}}</transactionid>\r\n</ns0:withdrawrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/withdraw",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"withdraw"
											]
										}
									},
									"response": []
								},
								{
									"name": "Blocked Account Active for Mobile Banking",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "64fcc07d-4854-459d-a1d9-320ada34838a",
												"exec": [
													"//checking the Responde code\r",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });\r",
													"\r",
													"var jsonData = xml2Json(responseBody);\r",
													"\r",
													"console.log(jsonData);\r",
													"\r",
													"//checking the payload structure ????\r",
													"var schema = {\r",
													"    \"type\":\"object\", \r",
													"    \"properties\":{\r",
													"        \"ns2:withdrawresponse\":{\r",
													"            \"type\":\"object\", \r",
													"            \"properties\":{\r",
													"                \"$\":{\"type\":\"object\"},\r",
													"                \"transactionid\":{\"type\":\"string\"},\r",
													"                \"providertransactionid\":{\"type\":\"string\"},\r",
													"                \"status\":{\"type\":\"string\"}, \r",
													"                \"message\":{\"type\":\"string\"}, \r",
													"                     }, \r",
													"            \"required\":[\"providertransactionid\", \"transactionid\", \"message\", \"status\"],\r",
													"            \"additionalProperties\": false\r",
													"        }\r",
													"    }, \r",
													"    \"required\":[\"ns2:withdrawresponse\"], \r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Schemai is valid\", () => {\r",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"//checking the Status \r",
													"pm.test(\"Status is FAILED\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].status).to.eql(\"FAILED\");\r",
													"});\r",
													"\r",
													"\r",
													"//checking the Error message\r",
													"pm.test(\"Error message is The account does not have an eligible status.\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].message).to.eql(\"The account does not have an eligible status.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ef486b3f-128a-4dfa-9dbc-0e1f01f02c0a",
												"exec": [
													"//Increasing Transaction ID for 1\r",
													"var value = pm.environment.get(\"transactionID\");\r",
													"pm.environment.set(\"transactionID\", (parseInt(value)+1).toString());\r",
													"\r",
													"pm.environment.set(\"account\", \"020001241000725562\");\r",
													"\r",
													"pm.environment.set(\"phone\", \"0755772714\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:withdrawrequest xmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n    <resource>FRI:{{account}}@FISA.bank/SP</resource>\r\n    <accountholderid>ID:{{phone}}/MSISDN</accountholderid>\r\n    <amount>\r\n        <amount>10.03</amount>\r\n        <currency>RWF</currency>\r\n    </amount>\r\n    <transactionid>{{transactionID}}</transactionid>\r\n</ns0:withdrawrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/withdraw",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"withdraw"
											]
										}
									},
									"response": []
								},
								{
									"name": "Blocked for Collateral Active for Mobile Banking",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "71627c06-ad87-421b-a6c7-cfcab27f550f",
												"exec": [
													"//checking the Responde code\r",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });\r",
													"\r",
													"var jsonData = xml2Json(responseBody);\r",
													"\r",
													"console.log(jsonData);\r",
													"\r",
													"//checking the payload structure ????\r",
													"var schema = {\r",
													"    \"type\":\"object\", \r",
													"    \"properties\":{\r",
													"        \"ns2:withdrawresponse\":{\r",
													"            \"type\":\"object\", \r",
													"            \"properties\":{\r",
													"                \"$\":{\"type\":\"object\"},\r",
													"                \"transactionid\":{\"type\":\"string\"},\r",
													"                \"providertransactionid\":{\"type\":\"string\"},\r",
													"                \"status\":{\"type\":\"string\"}, \r",
													"                \"message\":{\"type\":\"string\"}, \r",
													"                     }, \r",
													"            \"required\":[\"providertransactionid\", \"transactionid\", \"message\", \"status\"],\r",
													"            \"additionalProperties\": false\r",
													"        }\r",
													"    }, \r",
													"    \"required\":[\"ns2:withdrawresponse\"], \r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Schemai is valid\", () => {\r",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"//checking the Status \r",
													"pm.test(\"Status is FAILED\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].status).to.eql(\"FAILED\");\r",
													"});\r",
													"\r",
													"\r",
													"//checking the Error message\r",
													"pm.test(\"Error message is The account does not have an eligible status.\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].message).to.eql(\"The account does not have an eligible status.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ab8643af-88cd-4e13-a760-ebb9e657b392",
												"exec": [
													"//Increasing Transaction ID for 1\r",
													"var value = pm.environment.get(\"transactionID\");\r",
													"pm.environment.set(\"transactionID\", (parseInt(value)+1).toString());\r",
													"\r",
													"pm.environment.set(\"account\", \"020001241000006404\");\r",
													"\r",
													"pm.environment.set(\"phone\", \"0747553375\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:withdrawrequest xmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n    <resource>FRI:{{account}}@FISA.bank/SP</resource>\r\n    <accountholderid>ID:{{phone}}/MSISDN</accountholderid>\r\n    <amount>\r\n        <amount>1.03</amount>\r\n        <currency>RWF</currency>\r\n    </amount>\r\n    <transactionid>{{transactionID}}</transactionid>\r\n</ns0:withdrawrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/withdraw",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"withdraw"
											]
										}
									},
									"response": []
								},
								{
									"name": "Blocked for Withdrawal Active for Mobile Banking",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7cda742b-20ec-4615-b91e-15466676d901",
												"exec": [
													"//checking the Responde code\r",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });\r",
													"\r",
													"var jsonData = xml2Json(responseBody);\r",
													"\r",
													"console.log(jsonData);\r",
													"\r",
													"//checking the payload structure ????\r",
													"var schema = {\r",
													"    \"type\":\"object\", \r",
													"    \"properties\":{\r",
													"        \"ns2:withdrawresponse\":{\r",
													"            \"type\":\"object\", \r",
													"            \"properties\":{\r",
													"                \"$\":{\"type\":\"object\"},\r",
													"                \"transactionid\":{\"type\":\"string\"},\r",
													"                \"providertransactionid\":{\"type\":\"string\"},\r",
													"                \"status\":{\"type\":\"string\"}, \r",
													"                \"message\":{\"type\":\"string\"}, \r",
													"                     }, \r",
													"            \"required\":[\"providertransactionid\", \"transactionid\", \"message\", \"status\"],\r",
													"            \"additionalProperties\": false\r",
													"        }\r",
													"    }, \r",
													"    \"required\":[\"ns2:withdrawresponse\"], \r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Schemai is valid\", () => {\r",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"//checking the Status \r",
													"pm.test(\"Status is FAILED\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].status).to.eql(\"FAILED\");\r",
													"});\r",
													"\r",
													"\r",
													"//checking the Error message\r",
													"pm.test(\"Error message is The account does not have an eligible status.\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].message).to.eql(\"The account does not have an eligible status.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "36386aff-a56b-49e0-99ff-a1b8bec6fba4",
												"exec": [
													"//Increasing Transaction ID for 1\r",
													"var value = pm.environment.get(\"transactionID\");\r",
													"pm.environment.set(\"transactionID\", (parseInt(value)+1).toString());\r",
													"\r",
													"pm.environment.set(\"account\", \"020001241000007180\");\r",
													"\r",
													"pm.environment.set(\"phone\", \"0754445353\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:withdrawrequest xmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n    <resource>FRI:020001241000006210@FISA.bank/SP</resource>\r\n    <accountholderid>ID:{{phone}}/MSISDN</accountholderid>\r\n    <amount>\r\n        <amount>1.03</amount>\r\n        <currency>RWF</currency>\r\n    </amount>\r\n    <transactionid>{{transactionID}}</transactionid>\r\n</ns0:withdrawrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/withdraw",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"withdraw"
											]
										}
									},
									"response": []
								},
								{
									"name": "NotExistingAccount",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "82a8059b-ab36-4aed-b803-e4217d68a7b1",
												"exec": [
													"//checking the Responde code\r",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });\r",
													"\r",
													"var jsonData = xml2Json(responseBody);\r",
													"\r",
													"console.log(jsonData);\r",
													"\r",
													"//checking the payload structure ????\r",
													"var schema = {\r",
													"    \"type\":\"object\", \r",
													"    \"properties\":{\r",
													"        \"ns2:withdrawresponse\":{\r",
													"            \"type\":\"object\", \r",
													"            \"properties\":{\r",
													"                \"$\":{\"type\":\"object\"},\r",
													"                \"transactionid\":{\"type\":\"string\"},\r",
													"                \"providertransactionid\":{\"type\":\"string\"},\r",
													"                \"status\":{\"type\":\"string\"}, \r",
													"                \"message\":{\"type\":\"string\"}, \r",
													"                     }, \r",
													"            \"required\":[\"providertransactionid\", \"transactionid\", \"message\", \"status\"],\r",
													"            \"additionalProperties\": false\r",
													"        }\r",
													"    }, \r",
													"    \"required\":[\"ns2:withdrawresponse\"], \r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Schemai is valid\", () => {\r",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"//checking the Status \r",
													"pm.test(\"Status is FAILED\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].status).to.eql(\"FAILED\");\r",
													"});\r",
													"\r",
													"\r",
													"//checking the Error message\r",
													"pm.test(\"Error message is The account does not exist.\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].message).to.eql(\"The account does not exist.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fe3ff2b9-e4f5-4c44-b718-f3833b1fb149",
												"exec": [
													"//Increasing Transaction ID for 1\r",
													"var value = pm.environment.get(\"transactionID\");\r",
													"pm.environment.set(\"transactionID\", (parseInt(value)+1).toString());\r",
													"\r",
													"pm.environment.set(\"account\", \"020001241000007181\");\r",
													"\r",
													"pm.environment.set(\"phone\", \"0754445353\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:withdrawrequest xmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n    <resource>FRI:{{account}}@FISA.bank/SP</resource>\r\n    <accountholderid>ID:{{phone}}/MSISDN</accountholderid>\r\n    <amount>\r\n        <amount>1.02</amount>\r\n        <currency>RWF</currency>\r\n    </amount>\r\n    <transactionid>{{transactionID}}</transactionid>\r\n</ns0:withdrawrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/withdraw",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"withdraw"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid FRI",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "017cd8ba-c909-45c8-b198-a29de19433ea",
												"exec": [
													"//checking the Responde code\r",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });\r",
													"\r",
													"var jsonData = xml2Json(responseBody);\r",
													"\r",
													"console.log(jsonData);\r",
													"\r",
													"//checking the payload structure ????\r",
													"var schema = {\r",
													"    \"type\":\"object\", \r",
													"    \"properties\":{\r",
													"        \"ns2:withdrawresponse\":{\r",
													"            \"type\":\"object\", \r",
													"            \"properties\":{\r",
													"                \"$\":{\"type\":\"object\"},\r",
													"                \"transactionid\":{\"type\":\"string\"},\r",
													"                \"providertransactionid\":{\"type\":\"string\"},\r",
													"                \"status\":{\"type\":\"string\"}, \r",
													"                \"message\":{\"type\":\"string\"}, \r",
													"                     }, \r",
													"            \"required\":[\"providertransactionid\", \"transactionid\", \"message\", \"status\"],\r",
													"            \"additionalProperties\": false\r",
													"        }\r",
													"    }, \r",
													"    \"required\":[\"ns2:withdrawresponse\"], \r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Schemai is valid\", () => {\r",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"//checking the Status \r",
													"pm.test(\"Status is FAILED\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].status).to.eql(\"FAILED\");\r",
													"});\r",
													"\r",
													"\r",
													"//checking the Error message\r",
													"pm.test(\"Error message is Account number is required.\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].message).to.eql(\"Account number is required.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7fd5a46-78b3-4c52-9985-8e72a24a848f",
												"exec": [
													"//Increasing Transaction ID for 1\r",
													"var value = pm.environment.get(\"transactionID\");\r",
													"pm.environment.set(\"transactionID\", (parseInt(value)+1).toString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:withdrawrequest xmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n    <resource>FRI1:020001241000570459@FISA.bank/SP</resource>\r\n    <accountholderid>ID:0755236734/MSISDN</accountholderid>\r\n    <amount>\r\n        <amount>1.02</amount>\r\n        <currency>RWF</currency>\r\n    </amount>\r\n    <transactionid>{{transactionID}}</transactionid>\r\n</ns0:withdrawrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/withdraw",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"withdraw"
											]
										}
									},
									"response": []
								},
								{
									"name": "Failed Authorization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92e11488-313e-47fc-ab0a-eba880ff4b74",
												"exec": [
													"//checking the Responde code\r",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });\r",
													"\r",
													"var jsonData = xml2Json(responseBody);\r",
													"\r",
													"console.log(jsonData);\r",
													"\r",
													"//checking the payload structure ????\r",
													"var schema = {\r",
													"    \"type\":\"object\", \r",
													"    \"properties\":{\r",
													"        \"ns2:withdrawresponse\":{\r",
													"            \"type\":\"object\", \r",
													"            \"properties\":{\r",
													"                \"$\":{\"type\":\"object\"},\r",
													"                \"transactionid\":{\"type\":\"string\"},\r",
													"                \"providertransactionid\":{\"type\":\"string\"},\r",
													"                \"status\":{\"type\":\"string\"}, \r",
													"                \"message\":{\"type\":\"string\"}, \r",
													"                     }, \r",
													"            \"required\":[\"providertransactionid\", \"transactionid\", \"message\", \"status\"],\r",
													"            \"additionalProperties\": false\r",
													"        }\r",
													"    }, \r",
													"    \"required\":[\"ns2:withdrawresponse\"], \r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Schemai is valid\", () => {\r",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"//checking the Status \r",
													"pm.test(\"Status is FAILED\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].status).to.eql(\"FAILED\");\r",
													"});\r",
													"\r",
													"\r",
													"//checking the Error message\r",
													"pm.test(\"Error message is User not Authenticated.\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].message).to.eql(\"User not Authenticated.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "85d37e9e-2a4c-46d0-8cd2-62a34b8eaa5c",
												"exec": [
													"//Increasing Transaction ID for 1\r",
													"var value = pm.environment.get(\"transactionID\");\r",
													"pm.environment.set(\"transactionID\", (parseInt(value)+1).toString());\r",
													"\r",
													"pm.environment.set(\"account\", \"020001241000554842\");\r",
													"\r",
													"pm.environment.set(\"phone\", \"0784341387\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "123",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:withdrawrequest xmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n    <resource>FRI:{{account}}@FISA.bank/SP</resource>\r\n    <accountholderid>ID:{{phone}}/MSISDN</accountholderid>\r\n    <amount>\r\n        <amount>15.02</amount>\r\n        <currency>RWF</currency>\r\n    </amount>\r\n    <transactionid>{{transactionID}}</transactionid>\r\n</ns0:withdrawrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/withdraw",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"withdraw"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transaction <6",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c1375e9-8b62-43b7-a82f-7cedfc21a3f7",
												"exec": [
													"//checking the Responde code\r",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });\r",
													"\r",
													"var jsonData = xml2Json(responseBody);\r",
													"\r",
													"console.log(jsonData);\r",
													"\r",
													"\r",
													"//checking the payload structure \r",
													"\r",
													"var schema = {\r",
													"    \"type\":\"object\", \r",
													"    \"properties\":{\r",
													"        \"ns2:withdrawresponse\":{\r",
													"            \"type\":\"object\", \r",
													"            \"properties\":{\r",
													"                \"$\":{\"type\":\"object\"},\r",
													"                \"transactionid\":{\"type\":\"string\"},\r",
													"                \"providertransactionid\":{\"type\":\"string\"},\r",
													"                \"status\":{\"type\":\"string\"},\r",
													"                \"message\":{\"type\":\"string\"},\r",
													"                \"extension\":{\"type\":\"string\"}\r",
													"            }, \r",
													"            \"required\":[\"transactionid\", \"providertransactionid\", \"status\", \"message\", \"extension\"],\r",
													"            \"additionalProperties\": false\r",
													"        }\r",
													"    }, \r",
													"    \"required\":[\"ns2:withdrawresponse\"], \r",
													"    \"additionalProperties\": false   \r",
													"};\r",
													"\r",
													"pm.test(\"Schemai is valid\", () => {\r",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"//checking the Status \r",
													"pm.test(\"Status is COMPLETED\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].status).to.eql(\"COMPLETED\");\r",
													"});\r",
													"\r",
													"\r",
													"//checking Account Number \r",
													"pm.test(\"Matching Account Number\", function () {\r",
													"    pm.expect(jsonData['ns2:withdrawresponse'].message).to.include(pm.environment.get(\"account\"));  \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "98fdf0d8-e635-40e6-a8d8-19639e3bd5f7",
												"exec": [
													"//Increasing Transaction ID for 1\r",
													"var value = pm.environment.get(\"transactionID_short\");\r",
													"pm.environment.set(\"transactionID_short\", (parseInt(value)+1).toString());\r",
													"\r",
													"pm.environment.set(\"account\", \"020001241000570459\");\r",
													"\r",
													"pm.environment.set(\"phone\", \"0755236734\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:withdrawrequest xmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n     <resource>FRI:{{account}}@FISA.bank/SP</resource>\r\n    <accountholderid>ID:{{phone}}/MSISDN</accountholderid>\r\n    <amount>\r\n        <amount>1.02</amount>\r\n        <currency>RWF</currency>\r\n    </amount>\r\n    <transactionid>{{transactionID_short}}</transactionid>\r\n</ns0:withdrawrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/withdraw",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"withdraw"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Push",
			"item": [
				{
					"name": "GetFinancialResourceInformation ",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GetResourceInfo existing account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d1cefb2d-f3a3-46d3-87dd-ee5897667703",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"var jsonData = xml2Json(responseBody);",
													"",
													"console.log(jsonData);",
													"",
													"//checking the payload structure ",
													"",
													"var schema = {",
													"    \"type\":\"object\", ",
													"    \"properties\":{",
													"        \"ns2:getfinancialresourceinformationresponse\":{",
													"            \"type\":\"object\", ",
													"            \"properties\":{",
													"                \"$\":{\"type\":\"object\"},",
													"                \"message\":{\"type\":\"string\"},",
													"                \"extension\":{",
													"                     \"type\":\"object\", ",
													"                     \"properties\":{",
													"                         \"statuscode\":{\"type\":\"string\"}",
													"                     }, ",
													"                     \"required\":[\"statuscode\"], ",
													"                     \"additionalProperties\": false",
													"                }",
													"            }, ",
													"            \"required\":[\"message\", \"extension\"],",
													"            \"additionalProperties\": false",
													"        }",
													"    }, ",
													"    \"required\":[\"ns2:getfinancialresourceinformationresponse\"], ",
													"    \"additionalProperties\": false",
													"    ",
													"};",
													"",
													"pm.test(\"Schema is valid\", () => {",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);",
													"});",
													"",
													"//checking the Status code",
													"pm.test(\"Status code is 01\", function () {",
													"    pm.expect(jsonData['ns2:getfinancialresourceinformationresponse'].extension.statuscode).to.eql(\"01\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9bfaed27-ca46-463d-81ac-0f6ee1832fb0",
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:getfinancialresourceinformationrequest\txmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n\t<resource>FRI:020001241000000196@UBA.bank/SP</resource>\r\n\t<accountholderid>ID:231886197439/MSISDN</accountholderid>\r\n</ns0:getfinancialresourceinformationrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/getfinancialresourceinformation",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"getfinancialresourceinformation"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "Info Not existing account",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "610d7925-cc85-44bb-bfc5-125b1f9a2ea2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fd979f53-9104-4afa-9bff-3e292e4e9fc2",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"var jsonData = xml2Json(responseBody);",
													"",
													"console.log(jsonData);",
													"",
													"//checking the payload structure ",
													"",
													"var schema = {",
													"    \"type\":\"object\", ",
													"    \"properties\":{",
													"        \"ns2:getfinancialresourceinformationresponse\":{",
													"            \"type\":\"object\", ",
													"            \"properties\":{",
													"                \"$\":{\"type\":\"object\"},",
													"                \"message\":{\"type\":\"string\"},",
													"                \"extension\":{",
													"                     \"type\":\"object\", ",
													"                     \"properties\":{",
													"                         \"statuscode\":{\"type\":\"string\"}",
													"                     }, ",
													"                     \"required\":[\"statuscode\"], ",
													"                     \"additionalProperties\": false",
													"                }",
													"            }, ",
													"            \"required\":[\"message\", \"extension\"],",
													"            \"additionalProperties\": false",
													"        }",
													"    }, ",
													"    \"required\":[\"ns2:getfinancialresourceinformationresponse\"], ",
													"    \"additionalProperties\": false",
													"    ",
													"};",
													"",
													"pm.test(\"Schema is valid\", () => {",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);",
													"});",
													"",
													"//checking the Status code",
													"pm.test(\"Status code is 0\", function () {",
													"    pm.expect(jsonData['ns2:getfinancialresourceinformationresponse'].extension.statuscode).to.eql(\"00\");",
													"});",
													"",
													"//checking the Error message",
													"pm.test(\"Error message is The account does not exist.\", function () {",
													"    pm.expect(jsonData['ns2:getfinancialresourceinformationresponse'].message).to.eql(\"The account does not exist.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:getfinancialresourceinformationrequest\txmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n\t<resource>FRI:020001241000000197@UBA.bank/SP</resource>\r\n\t<accountholderid>ID:231886197439/MSISDN</accountholderid>\r\n</ns0:getfinancialresourceinformationrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/getfinancialresourceinformation",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"getfinancialresourceinformation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Info Failed Authorization",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1ec4d75d-13aa-4683-8bbd-76e88d1c3362",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bf4057aa-077c-41ad-8ab3-917419f69c2a",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"var jsonData = xml2Json(responseBody);",
													"",
													"console.log(jsonData);",
													"",
													"//checking the payload structure ",
													"",
													"var schema = {",
													"    \"type\":\"object\", ",
													"    \"properties\":{",
													"        \"ns2:getfinancialresourceinformationresponse\":{",
													"            \"type\":\"object\", ",
													"            \"properties\":{",
													"                \"$\":{\"type\":\"object\"},",
													"                \"message\":{\"type\":\"string\"},",
													"                \"extension\":{",
													"                     \"type\":\"object\", ",
													"                     \"properties\":{",
													"                         \"statuscode\":{\"type\":\"string\"}",
													"                     }, ",
													"                     \"required\":[\"statuscode\"], ",
													"                     \"additionalProperties\": false",
													"                }",
													"            }, ",
													"            \"required\":[\"message\", \"extension\"],",
													"            \"additionalProperties\": false",
													"        }",
													"    }, ",
													"    \"required\":[\"ns2:getfinancialresourceinformationresponse\"], ",
													"    \"additionalProperties\": false",
													"    ",
													"};",
													"",
													"pm.test(\"Schema is valid\", () => {",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);",
													"});",
													"",
													"//checking the Status code",
													"pm.test(\"Status code is 0\", function () {",
													"    pm.expect(jsonData['ns2:getfinancialresourceinformationresponse'].extension.statuscode).to.eql(\"00\");",
													"});",
													"",
													"//checking the Error message",
													"pm.test(\"Error message is User not Authenticated.\", function () {",
													"    pm.expect(jsonData['ns2:getfinancialresourceinformationresponse'].message).to.eql(\"User not Authenticated.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "123",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:getfinancialresourceinformationrequest\txmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n\t<resource>FRI:020001241000000196@UBA.bank/SP</resource>\r\n\t<accountholderid>ID:231886197439/MSISDN</accountholderid>\r\n</ns0:getfinancialresourceinformationrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/getfinancialresourceinformation",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"getfinancialresourceinformation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Info Invalid FRI",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "43e303ea-d838-4b0a-bd8d-af3f197941ab",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "74336b38-1496-4d0c-a3c9-b02f0b7dcf45",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"var jsonData = xml2Json(responseBody);",
													"",
													"console.log(jsonData);",
													"",
													"//checking the payload structure ",
													"",
													"var schema = {",
													"    \"type\":\"object\", ",
													"    \"properties\":{",
													"        \"ns2:getfinancialresourceinformationresponse\":{",
													"            \"type\":\"object\", ",
													"            \"properties\":{",
													"                \"$\":{\"type\":\"object\"},",
													"                \"message\":{\"type\":\"string\"},",
													"                \"extension\":{",
													"                     \"type\":\"object\", ",
													"                     \"properties\":{",
													"                         \"statuscode\":{\"type\":\"string\"}",
													"                     }, ",
													"                     \"required\":[\"statuscode\"], ",
													"                     \"additionalProperties\": false",
													"                }",
													"            }, ",
													"            \"required\":[\"message\", \"extension\"],",
													"            \"additionalProperties\": false",
													"        }",
													"    }, ",
													"    \"required\":[\"ns2:getfinancialresourceinformationresponse\"], ",
													"    \"additionalProperties\": false",
													"    ",
													"};",
													"",
													"pm.test(\"Schema is valid\", () => {",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);",
													"});",
													"",
													"//checking the Status code",
													"pm.test(\"Status code is 0\", function () {",
													"    pm.expect(jsonData['ns2:getfinancialresourceinformationresponse'].extension.statuscode).to.eql(\"00\");",
													"});",
													"",
													"//checking the Error message",
													"pm.test(\"Error message is Account number is required.\", function () {",
													"    pm.expect(jsonData['ns2:getfinancialresourceinformationresponse'].message).to.eql(\"Account number is required.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:getfinancialresourceinformationrequest\txmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n\t<resource>FR1I:020001241000000196@UBA.bank/SP</resource>\r\n\t<accountholderid>ID:231886197439/MSISDN</accountholderid>\r\n</ns0:getfinancialresourceinformationrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/getfinancialresourceinformation",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"getfinancialresourceinformation"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Payment",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "Pay Current_account",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "77ffaf1b-a453-40b9-bd6d-989b79423df2",
												"exec": [
													"//Increasing Transaction ID for 1",
													"var value = pm.environment.get(\"transactionID\");",
													"pm.environment.set(\"transactionID\", (parseInt(value)+1).toString());",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2f7c9f06-0bf4-4e94-8d79-ba740311d26f",
												"exec": [
													"//checking the Responde code",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"var jsonData = xml2Json(responseBody);",
													"",
													"//checking the payload structure ",
													"var schema = {",
													"    \"type\":\"object\", ",
													"    \"properties\":{",
													"        \"ns2:paymentresponse\":{",
													"            \"type\":\"object\", ",
													"            \"properties\":{",
													"                \"$\":{\"type\":\"object\"},",
													"                \"providertransactionid\":{\"type\":\"string\"},",
													"                 \"status\":{\"type\":\"string\"}, ",
													"                 \"extension\":{\"type\":\"string\"}",
													"                     }, ",
													"            \"required\":[\"providertransactionid\", \"status\", \"extension\"],",
													"            \"additionalProperties\": false",
													"        }",
													"    }, ",
													"    \"required\":[\"ns2:paymentresponse\"], ",
													"    \"additionalProperties\": false",
													"};",
													"",
													"pm.test(\"Schemai is valid\", () => {",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);",
													"});",
													"",
													"//checking the Status message",
													"pm.test(\"Status message is COMPLETED\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].status).to.eql(\"COMPLETED\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:paymentrequest\txmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n\t<transactionid>{{transactionID}}</transactionid>\r\n\t<accountholderid>ID:0124100928140/MSISDN</accountholderid>\r\n\t<receivingfri>FRI:020001241000001069@UBA.bank/SP</receivingfri>\r\n\t<amount>\r\n\t\t<amount>101.00</amount>\r\n\t\t<currency>RWF</currency>\r\n\t</amount>\r\n\t<message>Test</message>\r\n\t<extension/>\r\n</ns0:paymentrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/payment",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"payment"
											]
										}
									},
									"response": []
								},
								{
									"name": "Pay Current_account Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "94b9d9da-aaa3-43d0-a246-976b1830e3ca",
												"exec": [
													"//Increasing Transaction ID for 1",
													"var value = pm.environment.get(\"transactionID\");",
													"pm.environment.set(\"transactionID\", (parseInt(value)+1).toString());",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6bea531f-9bf4-4fb9-9e8d-1dd39f208be3",
												"exec": [
													"//checking the Responde code",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"var jsonData = xml2Json(responseBody);",
													"",
													"//checking the payload structure ",
													"var schema = {",
													"    \"type\":\"object\", ",
													"    \"properties\":{",
													"        \"ns2:paymentresponse\":{",
													"            \"type\":\"object\", ",
													"            \"properties\":{",
													"                \"$\":{\"type\":\"object\"},",
													"                \"providertransactionid\":{\"type\":\"string\"},",
													"                 \"status\":{\"type\":\"string\"}, ",
													"                 \"extension\":{\"type\":\"string\"}",
													"                     }, ",
													"            \"required\":[\"providertransactionid\", \"status\", \"extension\"],",
													"            \"additionalProperties\": false",
													"        }",
													"    }, ",
													"    \"required\":[\"ns2:paymentresponse\"], ",
													"    \"additionalProperties\": false",
													"};",
													"",
													"pm.test(\"Schemai is valid\", () => {",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);",
													"});",
													"",
													"//checking the Status message",
													"pm.test(\"Status message is COMPLETED\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].status).to.eql(\"COMPLETED\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:paymentrequest\txmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n\t<transactionid>{{transactionID}}</transactionid>\r\n\t<accountholderid>ID:0783150897/MSISDN</accountholderid>\r\n\t<receivingfri>FRI:020001241000715571@UBA.bank/SP</receivingfri>\r\n\t<amount>\r\n\t\t<amount>105.00</amount>\r\n\t\t<currency>RWF</currency>\r\n\t</amount>\r\n\t<message>Test</message>\r\n\t<extension/>\r\n</ns0:paymentrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "http://10.0.0.41:3000/api/mtn/wallet/payment?mockbehavior=relay",
											"protocol": "http",
											"host": [
												"10",
												"0",
												"0",
												"41"
											],
											"port": "3000",
											"path": [
												"api",
												"mtn",
												"wallet",
												"payment"
											],
											"query": [
												{
													"key": "mockbehavior",
													"value": "relay"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Pay Saving account",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f97ff2b6-4796-4f41-b523-5dc563cb2aee",
												"exec": [
													"//Increasing Transaction ID for 1",
													"var value = pm.environment.get(\"transactionID\");",
													"pm.environment.set(\"transactionID\", (parseInt(value)+1).toString());",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "91632866-622a-40ee-b755-32d4f5df7503",
												"exec": [
													"//checking the Responde code",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"var jsonData = xml2Json(responseBody);",
													"",
													"//checking the payload structure ",
													"var schema = {",
													"    \"type\":\"object\", ",
													"    \"properties\":{",
													"        \"ns2:paymentresponse\":{",
													"            \"type\":\"object\", ",
													"            \"properties\":{",
													"                \"$\":{\"type\":\"object\"},",
													"                \"providertransactionid\":{\"type\":\"string\"},",
													"                 \"status\":{\"type\":\"string\"}, ",
													"                 \"extension\":{\"type\":\"string\"}",
													"                     }, ",
													"            \"required\":[\"providertransactionid\", \"status\", \"extension\"],",
													"            \"additionalProperties\": false",
													"        }",
													"    }, ",
													"    \"required\":[\"ns2:paymentresponse\"], ",
													"    \"additionalProperties\": false",
													"};",
													"",
													"pm.test(\"Schemai is valid\", () => {",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);",
													"});",
													"",
													"//checking the Status message",
													"pm.test(\"Status message is COMPLETED\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].status).to.eql(\"COMPLETED\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:paymentrequest\txmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n\t<transactionid>{{transactionID}}</transactionid>\r\n\t<accountholderid>ID:0124100928140/MSISDN</accountholderid>\r\n\t<receivingfri>FRI:020001211000000731@UBA.bank/SP</receivingfri>\r\n\t<amount>\r\n\t\t<amount>100.00</amount>\r\n\t\t<currency>RWF</currency>\r\n\t</amount>\r\n\t<message>Test</message>\r\n\t<extension/>\r\n</ns0:paymentrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/payment",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"payment"
											]
										}
									},
									"response": []
								},
								{
									"name": "Pay Current_account without message",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5d006e5a-0fbc-47d2-b894-a29ec108f17b",
												"exec": [
													"//Increasing Transaction ID for 1",
													"var value = pm.environment.get(\"transactionID\");",
													"pm.environment.set(\"transactionID\", (parseInt(value)+1).toString());",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "851c50af-9d38-4dbb-9932-b8dc1af6a209",
												"exec": [
													"//checking the Responde code",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"var jsonData = xml2Json(responseBody);",
													"",
													"//checking the payload structure ",
													"var schema = {",
													"    \"type\":\"object\", ",
													"    \"properties\":{",
													"        \"ns2:paymentresponse\":{",
													"            \"type\":\"object\", ",
													"            \"properties\":{",
													"                \"$\":{\"type\":\"object\"},",
													"                \"providertransactionid\":{\"type\":\"string\"},",
													"                 \"status\":{\"type\":\"string\"}, ",
													"                 \"extension\":{\"type\":\"string\"}",
													"                     }, ",
													"            \"required\":[\"providertransactionid\", \"status\", \"extension\"],",
													"            \"additionalProperties\": false",
													"        }",
													"    }, ",
													"    \"required\":[\"ns2:paymentresponse\"], ",
													"    \"additionalProperties\": false",
													"};",
													"",
													"pm.test(\"Schemai is valid\", () => {",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);",
													"});",
													"",
													"//checking the Status message",
													"pm.test(\"Status message is COMPLETED\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].status).to.eql(\"COMPLETED\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:paymentrequest\txmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n\t<transactionid>{{transactionID}}</transactionid>\r\n\t<accountholderid>ID:0124100928140/MSISDN</accountholderid>\r\n\t<receivingfri>FRI:020001241000001069@UBA.bank/SP</receivingfri>\r\n\t<amount>\r\n\t\t<amount>100.01</amount>\r\n\t\t<currency>RWF</currency>\r\n\t</amount>\r\n\t<message></message>\r\n\t<extension/>\r\n</ns0:paymentrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/payment",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"payment"
											]
										}
									},
									"response": []
								},
								{
									"name": "Pay Current_acc USD",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "87478c66-254d-4fd3-8ec7-0b07202e6564",
												"exec": [
													"//Increasing Transaction ID for 1",
													"var value = pm.environment.get(\"transactionID\");",
													"pm.environment.set(\"transactionID\", (parseInt(value)+1).toString());",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ab2c53dd-cdb4-469f-b275-492fca1ed4d3",
												"exec": [
													"//checking the Responde code",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"var jsonData = xml2Json(responseBody);",
													"",
													"//checking the payload structure ",
													"var schema = {",
													"    \"type\":\"object\", ",
													"    \"properties\":{",
													"        \"ns2:paymentresponse\":{",
													"            \"type\":\"object\", ",
													"            \"properties\":{",
													"                \"$\":{\"type\":\"object\"},",
													"                \"providertransactionid\":{\"type\":\"string\"},",
													"                 \"status\":{\"type\":\"string\"}, ",
													"                 \"extension\":{\"type\":\"string\"}",
													"                     }, ",
													"            \"required\":[\"providertransactionid\", \"status\", \"extension\"],",
													"            \"additionalProperties\": false",
													"        }",
													"    }, ",
													"    \"required\":[\"ns2:paymentresponse\"], ",
													"    \"additionalProperties\": false",
													"};",
													"",
													"pm.test(\"Schemai is valid\", () => {",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);",
													"});",
													"",
													"//checking the Status message",
													"pm.test(\"Status message is COMPLETED\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].status).to.eql(\"COMPLETED\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:paymentrequest\txmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n\t<transactionid>{{transactionID}}</transactionid>\r\n\t<accountholderid>ID:0124100928140/MSISDN</accountholderid>\r\n\t<receivingfri>FRI:020001242000000938@UBA.bank/SP</receivingfri>\r\n\t<amount>\r\n\t\t<amount>10.00</amount>\r\n\t\t<currency>USD</currency>\r\n\t</amount>\r\n\t<message>Test</message>\r\n\t<extension/>\r\n</ns0:paymentrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/payment",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"payment"
											]
										}
									},
									"response": []
								},
								{
									"name": "Pay Blocked for withdrawal",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7edd65d3-4172-4395-85d3-641ad9d47902",
												"exec": [
													"//Increasing Transaction ID for 1",
													"var value = pm.environment.get(\"transactionID\");",
													"pm.environment.set(\"transactionID\", (parseInt(value)+1).toString());",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a09cb065-cc86-49a3-8191-a188497a09c8",
												"exec": [
													"//checking the Responde code",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"var jsonData = xml2Json(responseBody);",
													"",
													"//checking the payload structure ",
													"var schema = {",
													"    \"type\":\"object\", ",
													"    \"properties\":{",
													"        \"ns2:paymentresponse\":{",
													"            \"type\":\"object\", ",
													"            \"properties\":{",
													"                \"$\":{\"type\":\"object\"},",
													"                \"providertransactionid\":{\"type\":\"string\"},",
													"                 \"status\":{\"type\":\"string\"}, ",
													"                 \"extension\":{\"type\":\"string\"}",
													"                     }, ",
													"            \"required\":[\"providertransactionid\", \"status\", \"extension\"],",
													"            \"additionalProperties\": false",
													"        }",
													"    }, ",
													"    \"required\":[\"ns2:paymentresponse\"], ",
													"    \"additionalProperties\": false",
													"};",
													"",
													"pm.test(\"Schemai is valid\", () => {",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);",
													"});",
													"",
													"//checking the Status message",
													"pm.test(\"Status message is COMPLETED\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].status).to.eql(\"COMPLETED\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:paymentrequest\txmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n\t<transactionid>{{transactionID}}</transactionid>\r\n\t<accountholderid>ID:0124100928140/MSISDN</accountholderid>\r\n\t<receivingfri>FRI:020001241000003979@UBA.bank/SP</receivingfri>\r\n\t<amount>\r\n\t\t<amount>100.00</amount>\r\n\t\t<currency>RWF</currency>\r\n\t</amount>\r\n\t<message>Test</message>\r\n\t<extension/>\r\n</ns0:paymentrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/payment",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"payment"
											]
										}
									},
									"response": []
								},
								{
									"name": "Pay Blocked for collateral",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "10ddfdd7-c840-4c4b-b302-3c51c4296989",
												"exec": [
													"//Increasing Transaction ID for 1",
													"var value = pm.environment.get(\"transactionID\");",
													"pm.environment.set(\"transactionID\", (parseInt(value)+1).toString());",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "94c9df1d-e32f-4a78-bcdf-e6051231e786",
												"exec": [
													"//checking the Responde code",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"var jsonData = xml2Json(responseBody);",
													"",
													"//checking the payload structure ",
													"var schema = {",
													"    \"type\":\"object\", ",
													"    \"properties\":{",
													"        \"ns2:paymentresponse\":{",
													"            \"type\":\"object\", ",
													"            \"properties\":{",
													"                \"$\":{\"type\":\"object\"},",
													"                \"providertransactionid\":{\"type\":\"string\"},",
													"                 \"status\":{\"type\":\"string\"}, ",
													"                 \"extension\":{\"type\":\"string\"}",
													"                     }, ",
													"            \"required\":[\"providertransactionid\", \"status\", \"extension\"],",
													"            \"additionalProperties\": false",
													"        }",
													"    }, ",
													"    \"required\":[\"ns2:paymentresponse\"], ",
													"    \"additionalProperties\": false",
													"};",
													"",
													"pm.test(\"Schemai is valid\", () => {",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);",
													"});",
													"",
													"//checking the Status message",
													"pm.test(\"Status message is COMPLETED\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].status).to.eql(\"COMPLETED\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:paymentrequest\txmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n\t<transactionid>{{transactionID}}</transactionid>\r\n\t<accountholderid>ID:0124100928140/MSISDN</accountholderid>\r\n\t<receivingfri>FRI:020003241000338211@UBA.bank/SP</receivingfri>\r\n\t<amount>\r\n\t\t<amount>100.00</amount>\r\n\t\t<currency>RWF</currency>\r\n\t</amount>\r\n\t<message>Test</message>\r\n\t<extension/>\r\n</ns0:paymentrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/payment",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"payment"
											]
										}
									},
									"response": []
								},
								{
									"name": "Pay other format bank",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2f57c59c-9403-4b58-88f5-9672a12834c8",
												"exec": [
													"//Increasing Transaction ID for 1",
													"var value = pm.environment.get(\"transactionID\");",
													"pm.environment.set(\"transactionID\", (parseInt(value)+1).toString());",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ed28f5dd-7e02-445f-9e90-be4a19bae776",
												"exec": [
													"//checking the Responde code",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"var jsonData = xml2Json(responseBody);",
													"",
													"//checking the payload structure ",
													"var schema = {",
													"    \"type\":\"object\", ",
													"    \"properties\":{",
													"        \"ns2:paymentresponse\":{",
													"            \"type\":\"object\", ",
													"            \"properties\":{",
													"                \"$\":{\"type\":\"object\"},",
													"                \"providertransactionid\":{\"type\":\"string\"},",
													"                 \"status\":{\"type\":\"string\"}, ",
													"                 \"extension\":{\"type\":\"string\"}",
													"                     }, ",
													"            \"required\":[\"providertransactionid\", \"status\", \"extension\"],",
													"            \"additionalProperties\": false",
													"        }",
													"    }, ",
													"    \"required\":[\"ns2:paymentresponse\"], ",
													"    \"additionalProperties\": false",
													"};",
													"",
													"pm.test(\"Schemai is valid\", () => {",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);",
													"});",
													"",
													"//checking the Status message",
													"pm.test(\"Status message is COMPLETED\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].status).to.eql(\"COMPLETED\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:paymentrequest\txmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n\t<transactionid>{{transactionID}}</transactionid>\r\n\t<accountholderid>ID:0124100928140/MSISDN</accountholderid>\r\n\t<receivingfri>FRI:020003241000338211@pushpull.bank/SP</receivingfri>\r\n\t<amount>\r\n\t\t<amount>100.00</amount>\r\n\t\t<currency>RWF</currency>\r\n\t</amount>\r\n\t<message>Test</message>\r\n\t<extension/>\r\n</ns0:paymentrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/payment",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"payment"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "Pay TDA",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "df491e70-fa77-4f63-b87a-248bc47a3625",
												"exec": [
													"//Increasing Transaction ID for 1",
													"var value = pm.environment.get(\"transactionID\");",
													"pm.environment.set(\"transactionID\", (parseInt(value)+1).toString());",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "da4fb928-2d7d-417e-af9c-deadfaadaa46",
												"exec": [
													"//checking the Responde code",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"var jsonData = xml2Json(responseBody);",
													"",
													"console.log(jsonData);",
													"",
													"//checking the payload structure ????",
													"var schema = {",
													"    \"type\":\"object\", ",
													"    \"properties\":{",
													"        \"ns2:paymentresponse\":{",
													"            \"type\":\"object\", ",
													"            \"properties\":{",
													"                \"$\":{\"type\":\"object\"},",
													"                \"providertransactionid\":{\"type\":\"string\"},",
													"                \"scheduledtransactionid\":{\"type\":\"string\"},",
													"                \"message\":{\"type\":\"string\"}, ",
													"                 \"status\":{\"type\":\"string\"}",
													"                     }, ",
													"            \"required\":[\"providertransactionid\", \"scheduledtransactionid\", \"message\", \"status\"],",
													"            \"additionalProperties\": false",
													"        }",
													"    }, ",
													"    \"required\":[\"ns2:paymentresponse\"], ",
													"    \"additionalProperties\": false",
													"};",
													"",
													"pm.test(\"Schemai is valid\", () => {",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);",
													"});",
													"",
													"//checking the Status message",
													"pm.test(\"Status message is FAILED\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].status).to.eql(\"FAILED\");",
													"});",
													"",
													"//checking the Error message",
													"pm.test(\"Error message is The account is invalid.\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].message).to.eql(\"The account is invalid.\");",
													"});",
													"",
													"",
													"//checking Scheduled Transaction ID",
													"pm.test(\"Matching Scheduled TransactionID\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].scheduledtransactionid).to.eql(pm.environment.get(\"transactionID\"));  ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:paymentrequest\txmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n\t<transactionid>{{transactionID}}</transactionid>\r\n\t<accountholderid>ID:0124100928140/MSISDN</accountholderid>\r\n\t<receivingfri>FRI:020001221000004950@UBA.bank/SP</receivingfri>\r\n\t<amount>\r\n\t\t<amount>100.00</amount>\r\n\t\t<currency>RWF</currency>\r\n\t</amount>\r\n\t<message>Test</message>\r\n\t<extension/>\r\n</ns0:paymentrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/payment",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"payment"
											]
										}
									},
									"response": []
								},
								{
									"name": "Pay Blocked account",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "20955cd4-ba34-4fb0-9a49-fb8406e4da10",
												"exec": [
													"//Increasing Transaction ID for 1",
													"var value = pm.environment.get(\"transactionID\");",
													"pm.environment.set(\"transactionID\", (parseInt(value)+1).toString());",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c1aad5bc-ef30-4cc1-b6f0-1a92525f19b6",
												"exec": [
													"//checking the Responde code",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"var jsonData = xml2Json(responseBody);",
													"",
													"console.log(jsonData);",
													"",
													"//checking the payload structure ",
													"var schema = {",
													"    \"type\":\"object\", ",
													"    \"properties\":{",
													"        \"ns2:paymentresponse\":{",
													"            \"type\":\"object\", ",
													"            \"properties\":{",
													"                \"$\":{\"type\":\"object\"},",
													"                \"providertransactionid\":{\"type\":\"string\"},",
													"                \"scheduledtransactionid\":{\"type\":\"string\"},",
													"                \"message\":{\"type\":\"string\"}, ",
													"                 \"status\":{\"type\":\"string\"}",
													"                     }, ",
													"            \"required\":[\"providertransactionid\", \"scheduledtransactionid\", \"message\", \"status\"],",
													"            \"additionalProperties\": false",
													"        }",
													"    }, ",
													"    \"required\":[\"ns2:paymentresponse\"], ",
													"    \"additionalProperties\": false",
													"};",
													"",
													"pm.test(\"Schemai is valid\", () => {",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);",
													"});",
													"",
													"//checking the Status message",
													"pm.test(\"Status message is FAILED\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].status).to.eql(\"FAILED\");",
													"});",
													"",
													"//checking the Error message",
													"pm.test(\"The account does not have an eligible status.\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].message).to.eql(\"The account does not have an eligible status.\");",
													"});",
													"",
													"",
													"//checking Scheduled Transaction ID",
													"pm.test(\"Matching Scheduled TransactionID\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].scheduledtransactionid).to.eql(pm.environment.get(\"transactionID\"));  ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:paymentrequest\txmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n\t<transactionid>{{transactionID}}</transactionid>\r\n\t<accountholderid>ID:0124100928140/MSISDN</accountholderid>\r\n\t<receivingfri>FRI:020001241000000293@UBA.bank/SP</receivingfri>\r\n\t<amount>\r\n\t\t<amount>100.00</amount>\r\n\t\t<currency>RWF</currency>\r\n\t</amount>\r\n\t<message>Test</message>\r\n\t<extension/>\r\n</ns0:paymentrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/payment",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"payment"
											]
										}
									},
									"response": []
								},
								{
									"name": "Pay Finished account",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "53e75d1d-bd0e-4953-9bee-abc8a7b17125",
												"exec": [
													"//Increasing Transaction ID for 1",
													"var value = pm.environment.get(\"transactionID\");",
													"pm.environment.set(\"transactionID\", (parseInt(value)+1).toString());",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ba9852b5-c95e-427f-b3c9-731321dd8935",
												"exec": [
													"//checking the Responde code",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"var jsonData = xml2Json(responseBody);",
													"",
													"console.log(jsonData);",
													"",
													"//checking the payload structure ",
													"var schema = {",
													"    \"type\":\"object\", ",
													"    \"properties\":{",
													"        \"ns2:paymentresponse\":{",
													"            \"type\":\"object\", ",
													"            \"properties\":{",
													"                \"$\":{\"type\":\"object\"},",
													"                \"providertransactionid\":{\"type\":\"string\"},",
													"                \"scheduledtransactionid\":{\"type\":\"string\"},",
													"                \"message\":{\"type\":\"string\"}, ",
													"                 \"status\":{\"type\":\"string\"}",
													"                     }, ",
													"            \"required\":[\"providertransactionid\", \"scheduledtransactionid\", \"message\", \"status\"],",
													"            \"additionalProperties\": false",
													"        }",
													"    }, ",
													"    \"required\":[\"ns2:paymentresponse\"], ",
													"    \"additionalProperties\": false",
													"};",
													"",
													"pm.test(\"Schemai is valid\", () => {",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);",
													"});",
													"",
													"//checking the Status message",
													"pm.test(\"Status message is FAILED\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].status).to.eql(\"FAILED\");",
													"});",
													"",
													"//checking the Error message",
													"pm.test(\"The account does not have an eligible status.\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].message).to.eql(\"The account does not have an eligible status.\");",
													"});",
													"",
													"",
													"//checking Scheduled Transaction ID",
													"pm.test(\"Matching Scheduled TransactionID\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].scheduledtransactionid).to.eql(pm.environment.get(\"transactionID\"));  ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:paymentrequest\txmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n\t<transactionid>{{transactionID}}</transactionid>\r\n\t<accountholderid>ID:0124100928140/MSISDN</accountholderid>\r\n\t<receivingfri>FRI:020001241000000390@UBA.bank/SP</receivingfri>\r\n\t<amount>\r\n\t\t<amount>100.00</amount>\r\n\t\t<currency>RWF</currency>\r\n\t</amount>\r\n\t<message>Test</message>\r\n\t<extension/>\r\n</ns0:paymentrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/payment",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"payment"
											]
										}
									},
									"response": []
								},
								{
									"name": "Pay Invalid Currency",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1b0c7790-83bf-4b06-b2a1-2d499cf18421",
												"exec": [
													"//Increasing Transaction ID for 1",
													"var value = pm.environment.get(\"transactionID\");",
													"pm.environment.set(\"transactionID\", (parseInt(value)+1).toString());",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bd84d76f-b068-4ca6-9749-b86b41ebc54c",
												"exec": [
													"//checking the Responde code",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"var jsonData = xml2Json(responseBody);",
													"",
													"console.log(jsonData);",
													"",
													"//checking the payload structure ????",
													"var schema = {",
													"    \"type\":\"object\", ",
													"    \"properties\":{",
													"        \"ns2:paymentresponse\":{",
													"            \"type\":\"object\", ",
													"            \"properties\":{",
													"                \"$\":{\"type\":\"object\"},",
													"                \"providertransactionid\":{\"type\":\"string\"},",
													"                \"scheduledtransactionid\":{\"type\":\"string\"},",
													"                \"message\":{\"type\":\"string\"}, ",
													"                 \"status\":{\"type\":\"string\"}",
													"                     }, ",
													"            \"required\":[\"providertransactionid\", \"scheduledtransactionid\", \"message\", \"status\"],",
													"            \"additionalProperties\": false",
													"        }",
													"    }, ",
													"    \"required\":[\"ns2:paymentresponse\"], ",
													"    \"additionalProperties\": false",
													"};",
													"",
													"pm.test(\"Schemai is valid\", () => {",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);",
													"});",
													"",
													"//checking the Status message",
													"pm.test(\"Status message is FAILED\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].status).to.eql(\"FAILED\");",
													"});",
													"",
													"//checking the Error message",
													"pm.test(\"Error message is Currency of the account does not match to currency of transaction.\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].message).to.eql(\"Currency of the account does not match to currency of transaction.\");",
													"});",
													"",
													"",
													"//checking Scheduled Transaction ID",
													"pm.test(\"Matching Scheduled TransactionID\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].scheduledtransactionid).to.eql(pm.environment.get(\"transactionID\"));  ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:paymentrequest\txmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n\t<transactionid>{{transactionID}}</transactionid>\r\n\t<accountholderid>ID:0124100928140/MSISDN</accountholderid>\r\n\t<receivingfri>FRI:020001241000001069@UBA.bank/SP</receivingfri>\r\n\t<amount>\r\n\t\t<amount>100.00</amount>\r\n\t\t<currency>USD</currency>\r\n\t</amount>\r\n\t<message>Test</message>\r\n\t<extension/>\r\n</ns0:paymentrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/payment",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"payment"
											]
										}
									},
									"response": []
								},
								{
									"name": "Pay Invalid FRI",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "cd9f25b0-4e1f-410f-8e92-6f5210a0f530",
												"exec": [
													"//Increasing Transaction ID for 1",
													"var value = pm.environment.get(\"transactionID\");",
													"pm.environment.set(\"transactionID\", (parseInt(value)+1).toString());",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "30a013ff-8620-4fa8-9f7e-14f1cb8a2d28",
												"exec": [
													"//checking the Responde code",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"var jsonData = xml2Json(responseBody);",
													"",
													"console.log(jsonData);",
													"",
													"//checking the payload structure ????",
													"var schema = {",
													"    \"type\":\"object\", ",
													"    \"properties\":{",
													"        \"ns2:paymentresponse\":{",
													"            \"type\":\"object\", ",
													"            \"properties\":{",
													"                \"$\":{\"type\":\"object\"},",
													"                \"providertransactionid\":{\"type\":\"string\"},",
													"                \"scheduledtransactionid\":{\"type\":\"string\"},",
													"                \"message\":{\"type\":\"string\"}, ",
													"                 \"status\":{\"type\":\"string\"}",
													"                     }, ",
													"            \"required\":[\"providertransactionid\", \"scheduledtransactionid\", \"message\", \"status\"],",
													"            \"additionalProperties\": false",
													"        }",
													"    }, ",
													"    \"required\":[\"ns2:paymentresponse\"], ",
													"    \"additionalProperties\": false",
													"};",
													"",
													"pm.test(\"Schemai is valid\", () => {",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);",
													"});",
													"",
													"//checking the Status message",
													"pm.test(\"Status message is FAILED\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].status).to.eql(\"FAILED\");",
													"});",
													"",
													"//checking the Error message",
													"pm.test(\"Error message is Account number is required.\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].message).to.eql(\"Account number is required.\");",
													"});",
													"",
													"",
													"//checking Scheduled Transaction ID",
													"pm.test(\"Matching Scheduled TransactionID\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].scheduledtransactionid).to.eql(pm.environment.get(\"transactionID\"));  ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:paymentrequest\txmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n\t<transactionid>{{transactionID}}</transactionid>\r\n\t<accountholderid>ID:0124100928140/MSISDN</accountholderid>\r\n\t<receivingfri>FRI1:020001241000001069@UBA.bank/SP</receivingfri>\r\n\t<amount>\r\n\t\t<amount>100.00</amount>\r\n\t\t<currency>RWF</currency>\r\n\t</amount>\r\n\t<message>Test</message>\r\n\t<extension/>\r\n</ns0:paymentrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/payment",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"payment"
											]
										}
									},
									"response": []
								},
								{
									"name": "Pay Not Existing Account",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6be2c111-2a78-4bee-a9a3-ce61c8ab14ae",
												"exec": [
													"//Increasing Transaction ID for 1",
													"var value = pm.environment.get(\"transactionID\");",
													"pm.environment.set(\"transactionID\", (parseInt(value)+1).toString());",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1d5e0d72-14da-468c-833d-7d5b9db496f2",
												"exec": [
													"//checking the Responde code",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"var jsonData = xml2Json(responseBody);",
													"",
													"console.log(jsonData);",
													"",
													"//checking the payload structure ????",
													"var schema = {",
													"    \"type\":\"object\", ",
													"    \"properties\":{",
													"        \"ns2:paymentresponse\":{",
													"            \"type\":\"object\", ",
													"            \"properties\":{",
													"                \"$\":{\"type\":\"object\"},",
													"                \"providertransactionid\":{\"type\":\"string\"},",
													"                \"scheduledtransactionid\":{\"type\":\"string\"},",
													"                \"message\":{\"type\":\"string\"}, ",
													"                 \"status\":{\"type\":\"string\"}",
													"                     }, ",
													"            \"required\":[\"providertransactionid\", \"scheduledtransactionid\", \"message\", \"status\"],",
													"            \"additionalProperties\": false",
													"        }",
													"    }, ",
													"    \"required\":[\"ns2:paymentresponse\"], ",
													"    \"additionalProperties\": false",
													"};",
													"",
													"pm.test(\"Schemai is valid\", () => {",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);",
													"});",
													"",
													"//checking the Status message",
													"pm.test(\"Status message is FAILED\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].status).to.eql(\"FAILED\");",
													"});",
													"",
													"//checking the Error message",
													"pm.test(\"Error message is The account does not exist.\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].message).to.eql(\"The account does not exist.\");",
													"});",
													"",
													"",
													"//checking Scheduled Transaction ID",
													"pm.test(\"Matching Scheduled TransactionID\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].scheduledtransactionid).to.eql(pm.environment.get(\"transactionID\"));  ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:paymentrequest\txmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n\t<transactionid>{{transactionID}}</transactionid>\r\n\t<accountholderid>ID:0124100928140/MSISDN</accountholderid>\r\n\t<receivingfri>FRI:020001241000001067@UBA.bank/SP</receivingfri>\r\n\t<amount>\r\n\t\t<amount>100.00</amount>\r\n\t\t<currency>RWF</currency>\r\n\t</amount>\r\n\t<message>Test</message>\r\n\t<extension/>\r\n</ns0:paymentrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/payment",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"payment"
											]
										}
									},
									"response": []
								},
								{
									"name": "Pay Failed Authorization",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ca86c084-33ae-4fbb-a58c-b2853e3564bf",
												"exec": [
													"//Increasing Transaction ID for 1",
													"var value = pm.environment.get(\"transactionID\");",
													"pm.environment.set(\"transactionID\", (parseInt(value)+1).toString());",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1452015d-5922-4f49-acc0-26961767c3fd",
												"exec": [
													"//checking the Responde code",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"var jsonData = xml2Json(responseBody);",
													"",
													"//checking the payload structure ????",
													"var schema = {",
													"    \"type\":\"object\", ",
													"    \"properties\":{",
													"        \"ns2:paymentresponse\":{",
													"            \"type\":\"object\", ",
													"            \"properties\":{",
													"                \"$\":{\"type\":\"object\"},",
													"                \"providertransactionid\":{\"type\":\"string\"},",
													"                \"scheduledtransactionid\":{\"type\":\"string\"},",
													"                \"message\":{\"type\":\"string\"}, ",
													"                 \"status\":{\"type\":\"string\"}",
													"                     }, ",
													"            \"required\":[\"providertransactionid\", \"scheduledtransactionid\", \"message\", \"status\"],",
													"            \"additionalProperties\": false",
													"        }",
													"    }, ",
													"    \"required\":[\"ns2:paymentresponse\"], ",
													"    \"additionalProperties\": false",
													"};",
													"",
													"pm.test(\"Schemai is valid\", () => {",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);",
													"});",
													"",
													"//checking the Status message",
													"pm.test(\"Status message is FAILED\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].status).to.eql(\"FAILED\");",
													"});",
													"",
													"//checking the Error message",
													"pm.test(\"Error message is User not Authenticated.\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].message).to.eql(\"User not Authenticated.\");",
													"});",
													"",
													"",
													"//checking Scheduled Transaction ID",
													"pm.test(\"Matching Scheduled TransactionID\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].scheduledtransactionid).to.eql(pm.environment.get(\"transactionID\"));  ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "123",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:paymentrequest\txmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n\t<transactionid>{{transactionID}}</transactionid>\r\n\t<accountholderid>ID:0124100928140/MSISDN</accountholderid>\r\n\t<receivingfri>FRI1:020001241000001069@UBA.bank/SP</receivingfri>\r\n\t<amount>\r\n\t\t<amount>100.00</amount>\r\n\t\t<currency>RWF</currency>\r\n\t</amount>\r\n\t<message>Test</message>\r\n\t<extension/>\r\n</ns0:paymentrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/payment",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"payment"
											]
										}
									},
									"response": []
								},
								{
									"name": "Pay the same Transaction ID other amount",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7ff91e78-a786-4f43-9e79-f10974009465",
												"exec": [
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3021be69-7e98-47bd-9152-0c0f1ab43d72",
												"exec": [
													"//checking the Responde code",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"var jsonData = xml2Json(responseBody);",
													"",
													"//checking the payload structure ",
													"//checking the payload structure ????",
													"var schema = {",
													"    \"type\":\"object\", ",
													"    \"properties\":{",
													"        \"ns2:paymentresponse\":{",
													"            \"type\":\"object\", ",
													"            \"properties\":{",
													"                \"$\":{\"type\":\"object\"},",
													"                \"providertransactionid\":{\"type\":\"string\"},",
													"                \"scheduledtransactionid\":{\"type\":\"string\"},",
													"                \"message\":{\"type\":\"string\"}, ",
													"                 \"status\":{\"type\":\"string\"}",
													"                     }, ",
													"            \"required\":[\"providertransactionid\", \"scheduledtransactionid\", \"message\", \"status\"],",
													"            \"additionalProperties\": false",
													"        }",
													"    }, ",
													"    \"required\":[\"ns2:paymentresponse\"], ",
													"    \"additionalProperties\": false",
													"};",
													"",
													"",
													"pm.test(\"Schemai is valid\", () => {",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);",
													"});",
													"",
													"//checking the Status message",
													"pm.test(\"Status message is FAILED\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].status).to.eql(\"FAILED\");",
													"});",
													"",
													"//checking the Error message",
													"pm.test(\"Error message is The details of the message are not matching the original message.\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].message).to.eql(\"The details of the message are not matching the original message.\");",
													"});",
													"",
													"",
													"//checking Scheduled Transaction ID",
													"pm.test(\"Matching Scheduled TransactionID\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].scheduledtransactionid).to.eql(\"123498\");  ",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:paymentrequest\txmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n\t<transactionid>123498</transactionid>\r\n\t<accountholderid>ID:0124100928140/MSISDN</accountholderid>\r\n\t<receivingfri>FRI:020003241000338211@pushpull.bank/SP</receivingfri>\r\n\t<amount>\r\n\t\t<amount>101.00</amount>\r\n\t\t<currency>RWF</currency>\r\n\t</amount>\r\n\t<message>Test</message>\r\n\t<extension/>\r\n</ns0:paymentrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/payment",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"payment"
											]
										}
									},
									"response": []
								},
								{
									"name": "Pay the same Transaction ID other account",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "cddafae3-a19d-44e5-aebf-e6d932ee90d4",
												"exec": [
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "eb3a282e-f7c7-46ba-8832-2c9cc1424d02",
												"exec": [
													"//checking the Responde code",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"var jsonData = xml2Json(responseBody);",
													"",
													"//checking the payload structure ",
													"//checking the payload structure ????",
													"var schema = {",
													"    \"type\":\"object\", ",
													"    \"properties\":{",
													"        \"ns2:paymentresponse\":{",
													"            \"type\":\"object\", ",
													"            \"properties\":{",
													"                \"$\":{\"type\":\"object\"},",
													"                \"providertransactionid\":{\"type\":\"string\"},",
													"                \"scheduledtransactionid\":{\"type\":\"string\"},",
													"                \"message\":{\"type\":\"string\"}, ",
													"                 \"status\":{\"type\":\"string\"}",
													"                     }, ",
													"            \"required\":[\"providertransactionid\", \"scheduledtransactionid\", \"message\", \"status\"],",
													"            \"additionalProperties\": false",
													"        }",
													"    }, ",
													"    \"required\":[\"ns2:paymentresponse\"], ",
													"    \"additionalProperties\": false",
													"};",
													"",
													"",
													"pm.test(\"Schemai is valid\", () => {",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);",
													"});",
													"",
													"//checking the Status message",
													"pm.test(\"Status message is FAILED\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].status).to.eql(\"FAILED\");",
													"});",
													"",
													"//checking the Error message",
													"pm.test(\"Error message is The details of the message are not matching the original message.\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].message).to.eql(\"The details of the message are not matching the original message.\");",
													"});",
													"",
													"",
													"//checking Scheduled Transaction ID",
													"pm.test(\"Matching Scheduled TransactionID\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].scheduledtransactionid).to.eql(\"123498\");  ",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:paymentrequest\txmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n\t<transactionid>123498</transactionid>\r\n\t<accountholderid>ID:0124100928140/MSISDN</accountholderid>\r\n\t<receivingfri>FRI:020001241000004173@pushpull.bank/SP</receivingfri>\r\n\t<amount>\r\n\t\t<amount>100.00</amount>\r\n\t\t<currency>RWF</currency>\r\n\t</amount>\r\n\t<message>Test</message>\r\n\t<extension/>\r\n</ns0:paymentrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/payment",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"payment"
											]
										}
									},
									"response": []
								},
								{
									"name": "Pay the same Transaction ID other Mobile",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e90b6838-712f-4c85-906b-15807da4b935",
												"exec": [
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "da4c2852-cc1b-4066-9f54-e683cf96cc17",
												"exec": [
													"//checking the Responde code",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"var jsonData = xml2Json(responseBody);",
													"",
													"//checking the payload structure ",
													"//checking the payload structure ????",
													"var schema = {",
													"    \"type\":\"object\", ",
													"    \"properties\":{",
													"        \"ns2:paymentresponse\":{",
													"            \"type\":\"object\", ",
													"            \"properties\":{",
													"                \"$\":{\"type\":\"object\"},",
													"                \"providertransactionid\":{\"type\":\"string\"},",
													"                \"scheduledtransactionid\":{\"type\":\"string\"},",
													"                \"message\":{\"type\":\"string\"}, ",
													"                 \"status\":{\"type\":\"string\"}",
													"                     }, ",
													"            \"required\":[\"providertransactionid\", \"scheduledtransactionid\", \"message\", \"status\"],",
													"            \"additionalProperties\": false",
													"        }",
													"    }, ",
													"    \"required\":[\"ns2:paymentresponse\"], ",
													"    \"additionalProperties\": false",
													"};",
													"",
													"",
													"pm.test(\"Schemai is valid\", () => {",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);",
													"});",
													"",
													"//checking the Status message",
													"pm.test(\"Status message is FAILED\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].status).to.eql(\"FAILED\");",
													"});",
													"",
													"//checking the Error message",
													"pm.test(\"Error message is The details of the message are not matching the original message.\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].message).to.eql(\"The details of the message are not matching the original message.\");",
													"});",
													"",
													"",
													"//checking Scheduled Transaction ID",
													"pm.test(\"Matching Scheduled TransactionID\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].scheduledtransactionid).to.eql(pm.environment.get(\"123498\"));  ",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:paymentrequest\txmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n\t<transactionid>123498</transactionid>\r\n\t<accountholderid>ID:0124100928141/MSISDN</accountholderid>\r\n\t<receivingfri>FRI:020003241000338211@pushpull.bank/SP</receivingfri>\r\n\t<amount>\r\n\t\t<amount>100.00</amount>\r\n\t\t<currency>RWF</currency>\r\n\t</amount>\r\n\t<message>Test</message>\r\n\t<extension/>\r\n</ns0:paymentrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/payment",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"payment"
											]
										}
									},
									"response": []
								},
								{
									"name": "Pay the same Transaction ID other Currency",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "383f70e0-8394-4b5d-841f-60879fdf0ffc",
												"exec": [
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a1657dbf-ce71-441a-826e-c7cffd2496d9",
												"exec": [
													"//checking the Responde code",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"var jsonData = xml2Json(responseBody);",
													"",
													"//checking the payload structure ",
													"//checking the payload structure ????",
													"var schema = {",
													"    \"type\":\"object\", ",
													"    \"properties\":{",
													"        \"ns2:paymentresponse\":{",
													"            \"type\":\"object\", ",
													"            \"properties\":{",
													"                \"$\":{\"type\":\"object\"},",
													"                \"providertransactionid\":{\"type\":\"string\"},",
													"                \"scheduledtransactionid\":{\"type\":\"string\"},",
													"                \"message\":{\"type\":\"string\"}, ",
													"                 \"status\":{\"type\":\"string\"}",
													"                     }, ",
													"            \"required\":[\"providertransactionid\", \"scheduledtransactionid\", \"message\", \"status\"],",
													"            \"additionalProperties\": false",
													"        }",
													"    }, ",
													"    \"required\":[\"ns2:paymentresponse\"], ",
													"    \"additionalProperties\": false",
													"};",
													"",
													"",
													"pm.test(\"Schemai is valid\", () => {",
													"    pm.expect(jsonData).to.have.jsonSchema(schema);",
													"});",
													"",
													"//checking the Status message",
													"pm.test(\"Status message is FAILED\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].status).to.eql(\"FAILED\");",
													"});",
													"",
													"//checking the Error message",
													"pm.test(\"Error message is The details of the message are not matching the original message.\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].message).to.eql(\"The details of the message are not matching the original message.\");",
													"});",
													"",
													"",
													"//checking Scheduled Transaction ID",
													"pm.test(\"Matching Scheduled TransactionID\", function () {",
													"    pm.expect(jsonData['ns2:paymentresponse'].scheduledtransactionid).to.eql(\"123498\");  ",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Auth_psw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Auth_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns0:paymentrequest\txmlns:ns0=\"http://www.ericsson.com/em/emm/serviceprovider/v1_0/backend/client\">\r\n\t<transactionid>123498</transactionid>\r\n\t<accountholderid>ID:0124100928140/MSISDN</accountholderid>\r\n\t<receivingfri>FRI:020003241000338211@pushpull.bank/SP</receivingfri>\r\n\t<amount>\r\n\t\t<amount>100.00</amount>\r\n\t\t<currency>USD</currency>\r\n\t</amount>\r\n\t<message>Test</message>\r\n\t<extension/>\r\n</ns0:paymentrequest>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{mtnRestUrlTest}}/api/mtn/wallet/payment",
											"host": [
												"{{mtnRestUrlTest}}"
											],
											"path": [
												"api",
												"mtn",
												"wallet",
												"payment"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "20e14eb6-4625-4b43-b1bc-e8687f62bb0c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "abbb5546-b81a-47a2-9d41-9faf2418431f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}